<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WPILib</name>
  </assembly>
  <members>
    <member name="T:WPILib.ADXL345">
      <summary>
            Base class for the ADXL345 Accelerometer
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.ADXL345</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.ADXL345.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormatRegister">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.DataFormatRegister</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataRegister">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.DataRegister</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.ADXL345.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.ADXL345.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="F:WPILib.ADXL345.GsPerLSB">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.GsPerLSB</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.ADXL345.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtlRegister">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.PowerCtlRegister</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.ADXL345.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.ADXL345.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345_I2C">
      <summary>
            ADXL345 Accelerometer interfaced over I2C.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345_I2C.#ctor(WPILib.I2C.Port,WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Constructor
            </summary>
      <param name="port">The I2C port the accelerometer is attached to</param>
      <param name="range">The range (+ or -) that the accelerometer will measure.</param>
    </member>
    <member name="M:WPILib.ADXL345_I2C.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_I2C.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_I2C.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345_SPI">
      <summary>
            ADXL345 Accelerometer interfaced over I2C.
            </summary>
    </member>
    <member name="M:WPILib.ADXL345_SPI.#ctor(WPILib.SPI.Port,WPILib.Interfaces.AccelerometerRange)">
      <summary>
            Constructor
            </summary>
      <param name="port">The SPI port the accelerometer is attached to</param>
      <param name="range">The range (+ or -) that the accelerometer will measure.</param>
    </member>
    <member name="M:WPILib.ADXL345_SPI.GetAcceleration(WPILib.ADXL345.Axes)">
      <summary>
            Get the acceleration of one axis in Gs.
            </summary>
      <param name="axis">The axis to read from.</param>
      <returns>Acceleration of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_SPI.GetAccelerations">
      <summary>
            Get the acceleration of all axes in Gs.
            </summary>
      <returns>An object containing the acceleration measured on each side of the ADXL345 in Gs.</returns>
    </member>
    <member name="M:WPILib.ADXL345_SPI.WriteRange(System.Byte)">
      <summary>
            Writes the range to the specified interface.
            </summary>
      <param name="value">The Range to write.</param>
    </member>
    <member name="T:WPILib.ADXL345.AllAxes">
      <summary>
            A struct containing all the axes the accelerometer contains.
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.AllAxes.XAxis">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.AllAxes.XAxis</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.ADXL345.AllAxes.YAxis">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.AllAxes.YAxis</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.ADXL345.AllAxes.ZAxis">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.ADXL345.AllAxes.ZAxis</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.ADXL345.Axes">
      <summary>
            Axes Index's for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.Axes.X"></member>
    <member name="F:WPILib.ADXL345.Axes.Y"></member>
    <member name="F:WPILib.ADXL345.Axes.Z"></member>
    <member name="T:WPILib.ADXL345.DataFormat">
      <summary>
            Data Format Settings for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.DataFormat.SelfTest"></member>
    <member name="F:WPILib.ADXL345.DataFormat.SPI"></member>
    <member name="F:WPILib.ADXL345.DataFormat.IntInvert"></member>
    <member name="F:WPILib.ADXL345.DataFormat.FullRes"></member>
    <member name="F:WPILib.ADXL345.DataFormat.Justify"></member>
    <member name="T:WPILib.ADXL345.PowerCtl">
      <summary>
            Power Control Settings for ADXL345
            </summary>
    </member>
    <member name="F:WPILib.ADXL345.PowerCtl.Link"></member>
    <member name="F:WPILib.ADXL345.PowerCtl.AutoSleep"></member>
    <member name="F:WPILib.ADXL345.PowerCtl.Measure"></member>
    <member name="F:WPILib.ADXL345.PowerCtl.Sleep"></member>
    <member name="T:WPILib.AnalogAccelerometer">
      <summary>
            Handle operation of an analog accelerometer
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.#ctor(System.Int32)">
      <summary>
            Create a new instance of an accelerometer, declaring a new analog channel.
            </summary>
      <param name="channel">The channel the accelerometer is connected to.</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.#ctor(WPILib.AnalogInput)">
      <summary>
            Creates a new instance of the Accelerometer from an existing <see cref="T:WPILib.AnalogInput" /></summary>
      <param name="channel">The existing <see cref="T:WPILib.AnalogInput" /> the accelerometer is connected to.</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.Dispose">
      <summary>
            Delete the analog components used for the accelerometer.
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.GetAcceleration">
      <summary>
            Returns the acceleration in Gs.
            </summary>
      <returns>The acceleration in Gs.</returns>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Sensitivity">
      <summary>
            Sets the accelerometer sensitivity.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogAccelerometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="P:WPILib.AnalogAccelerometer.Zero">
      <summary>
            Sets the voltage that corresponds to 0G.
            </summary>
    </member>
    <member name="T:WPILib.AnalogInput">
      <summary>
            Analog Channel class. Each channel is read from hardware as a 12-bit number representing 0v to 5v.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.#ctor(System.Int32)">
      <summary>
            Construct an analog channel
            </summary>
      <param name="channel">The channel number to represent. 0-3 are on-board 4-7 are on the MXP port.</param>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorCenter">
      <summary>
            Set the center value of the accumulator.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorDeadband">
      <summary>
            Set the accumulators deadband in 12 bit format.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AccumulatorInitialValue">
      <summary>
            Set an initial value for the accumulator. This will be added to all values returned to the user.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.AverageBits">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.AnalogInput.AverageBits</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Channel">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.AnalogInput.Channel</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.AnalogInput.Dispose">
      <summary>
            Channel destructor.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorCount">
      <summary>
            Read the number of accumulated values
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.AnalogInput.GetAccumulatorCount</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorOutput(System.Int64@,System.UInt32@)">
      <summary>
            Read the accumulated value and the number of accumulated values atomically
            </summary>
      <param name="value">The 64 bit accumulated output</param>
      <param name="count">The number of accumulation cycles</param>
    </member>
    <member name="M:WPILib.AnalogInput.GetAccumulatorValue">
      <summary>
            Read the accumulated value
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.AnalogInput.GetAccumulatorValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetAverageValue">
      <summary>
            Get a sample from the output of the oversample and average engine for this channel.
            </summary>
      <returns> A sample from the oversample and average engine for this channel.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetAverageVoltage">
      <summary>
            Get a scaled sample from the output of the oversample and average engine
            for this channel.
            </summary>
      <returns>A scaled sample from the output of the oversample and average engine for this channel.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetValue">
      <summary>
            Get a sample straight from this channel. 
            </summary>
      <returns>A straight sample from this channel in 12 bit form.</returns>
    </member>
    <member name="M:WPILib.AnalogInput.GetVoltage">
      <summary>
            Get a scaled sample straight from this channel.
            </summary>
      <returns>The voltage on the Analog Input</returns>
    </member>
    <member name="P:WPILib.AnalogInput.GlobalSampleRate">
      <summary>
            Gets or Sets the current global sample rage.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.InitAccumulator">
      <summary>
            Initialize the accumulator.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.AnalogInput.IsAccumulatorChannel">
      <summary>
            Is the channel attached to an accumulator.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.LSBWeight">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.AnalogInput.LSBWeight</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Offset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.AnalogInput.Offset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.AnalogInput.OversampleBits">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.AnalogInput.OversampleBits</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.AnalogInput.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="M:WPILib.AnalogInput.ResetAccumulator">
      <summary>
            Reset the accumulator to its initial value.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogInput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogInput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogOutput">
      <summary>
            Analog Output class
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.#ctor(System.Int32)">
      <summary>
            Construct an analog output on a specified MXP channel.
            </summary>
      <param name="channel">The channel number to represent.</param>
    </member>
    <member name="M:WPILib.AnalogOutput.Dispose">
      <summary>
            Channel Destructor.
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.GetVoltage">
      <summary>
            Get the voltage being output
            </summary>
      <returns>The voltage being output</returns>
    </member>
    <member name="M:WPILib.AnalogOutput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogOutput.SetVoltage(System.Double)">
      <summary>
            Set the voltage being output.
            </summary>
      <param name="voltage">The voltage to output</param>
    </member>
    <member name="P:WPILib.AnalogOutput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogOutput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogOutput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogPotentiometer">
      <summary>
            Class for reading analog potentiometers
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(System.Int32)">
      <summary>
            AnalogPotentiometer constructor
            </summary>
      <param name="channel">The analog channel this potentiometer is plugged into.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.AnalogPotentiometer</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="scale">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scale</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.AnalogPotentiometer</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="fullRange">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fullRange</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="offset">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offset</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(System.Int32,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput)">
      <summary>
            AnalogPotentiometer constructor
            </summary>
      <param name="input">The <see cref="T:WPILib.AnalogInput" /> this potentiometer is plugged into.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.AnalogPotentiometer</parameter>
          </include>
        </markup>
      </summary>
      <param name="input">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="scale">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>scale</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.AnalogPotentiometer</parameter>
          </include>
        </markup>
      </summary>
      <param name="input">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>input</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="fullRange">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fullRange</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="offset">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>offset</parameter>
            <parameter>M:WPILib.AnalogPotentiometer.#ctor(WPILib.AnalogInput,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.Dispose">
      <summary>
            Frees the potentiometer.
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.Get">
      <summary>
            Get the current reading of the potentiometer
            </summary>
      <returns>The current position of the potentiometer</returns>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="P:WPILib.AnalogPotentiometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.AnalogPotentiometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.AnalogPotentiometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.AnalogTrigger">
      <summary>
            Class for creating and configuring Analog Triggers.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.#ctor(System.Int32)">
      <summary>
            Constructor for an analog trigger given a channel number.
            </summary>
      <param name="channel">The port to use for the analog trigger 0-3 are on-board, 4-7 are on the MXP port</param>
    </member>
    <member name="M:WPILib.AnalogTrigger.#ctor(WPILib.AnalogInput)">
      <summary>
            Construct an analog trigger given an analog channel.
            </summary>
      <param name="channel">The <see cref="T:WPILib.AnalogInput" /> to use for the analog trigger</param>
    </member>
    <member name="P:WPILib.AnalogTrigger.Averaged">
      <summary>
            Configure the analog trigger to use averaged vs. raw values.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.CreateOutput(HAL_Base.AnalogTriggerType)">
      <summary>
            Creates an <see cref="T:WPILib.AnalogTriggerOutput">analog trigger output</see>. 
            </summary>
      <param name="type">The type of object to create.</param>
      <returns>A pointer to a new <see cref="T:WPILib.AnalogTriggerOutput" /></returns>
    </member>
    <member name="M:WPILib.AnalogTrigger.Dispose">
      <summary>
            Release the resources used by this object.
            </summary>
    </member>
    <member name="P:WPILib.AnalogTrigger.Filtered">
      <summary>
            Configure the analog trigger to use a filtered value. True if filtered.
            </summary>
    </member>
    <member name="P:WPILib.AnalogTrigger.Index">
      <summary>
            Gets the index of the analog trigger
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.InitTrigger(System.Int32)">
      <summary>
            Initialize an analog trigger from a channel
            </summary>
      <param name="channel">The port to use for the analog trigger.</param>
    </member>
    <member name="P:WPILib.AnalogTrigger.InWindow">
      <summary>
            Return the InWindow output of the analog trigger. True if between the limits.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTrigger.SetLimitsRaw(System.Int32,System.Int32)">
      <summary>
            Set the upper and lower limits of the analog trigger. The limits are
            given in ADC codes.If oversampling is used, the units must be scaled
            appropriately.
            </summary>
      <param name="lower">The lower raw limit</param>
      <param name="upper">The upper raw limit</param>
    </member>
    <member name="M:WPILib.AnalogTrigger.SetLimitsVoltage(System.Double,System.Double)">
      <summary>
            Set the upper and lower limits of the analog trigger. The limits are
            given as floating point voltage values.
            </summary>
      <param name="lower">The lower voltage limit</param>
      <param name="upper">The upper voltage limit</param>
    </member>
    <member name="P:WPILib.AnalogTrigger.TriggerState">
      <summary>
            Return the trigger state. True if above upper limit, False if below lower limit.
            Maintains previous value if in between limits.
            </summary>
    </member>
    <member name="T:WPILib.AnalogTriggerOutput">
      <summary>
            Class to represent a specific output from an analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.#ctor(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)">
      <summary>
            Create an object that represents one of the four outputs from an analog trigger.
            </summary>
      <param name="trigger">The trigger for which this is an output.</param>
      <param name="outputType">An enum that specifies the output on the trigger to represent.</param>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger?
            </summary>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.Dispose">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:WPILib.AnalogTriggerOutput.Get">
      <summary>
            Get the state of the analog trigger output
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.AnalogTriggerOutput.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.AnalogTriggerOutput.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="T:WPILib.BuiltInAccelerometer">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:WPILib.BuiltInAccelerometer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.#ctor(WPILib.Interfaces.AccelerometerRange)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.BuiltInAccelerometer</parameter>
          </include>
        </markup>
      </summary>
      <param name="range">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>range</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.#ctor(WPILib.Interfaces.AccelerometerRange)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.AccelerometerRange">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.BuiltInAccelerometer.AccelerometerRange</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetX">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetX</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetX</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetY">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetY</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetY</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.GetZ">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetZ</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.BuiltInAccelerometer.GetZ</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.BuiltInAccelerometer.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.BuiltInAccelerometer.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.CANJaguar">
      <summary>
            This class represents a CAN Jaguar Motor Controller.
            </summary>
    </member>
    <member name="M:WPILib.CANJaguar.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CANJaguar</parameter>
          </include>
        </markup>
      </summary>
      <param name="deviceNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deviceNumber</parameter>
            <parameter>M:WPILib.CANJaguar.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.Alive">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Alive</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.ConfigNeutralMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.ConfigNeutralMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="forwardLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forwardLimitPosition</parameter>
            <parameter>M:WPILib.CANJaguar.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseLimitPosition</parameter>
            <parameter>M:WPILib.CANJaguar.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.D">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.D</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Description">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Description</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.DeviceNumber">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.DeviceNumber</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.Disable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Disable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.DisableControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.DisableControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.DisableSoftPositionLimits">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.DisableSoftPositionLimits</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>WPILib.CANJaguar</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.Enable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Enable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.EnableControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.EnableControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.EnableControl(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.EnableControl(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="encoderInitialPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>encoderInitialPosition</parameter>
            <parameter>M:WPILib.CANJaguar.EnableControl(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.Enabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Enabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.EncoderCodesPerRev">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.EncoderCodesPerRev</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Expiration">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Expiration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.FaultTime">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.FaultTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.FirmwareVersion">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.FirmwareVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.ForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.ForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.FXP16_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="a">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>a</parameter>
            <parameter>M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="b">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>b</parameter>
            <parameter>M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.FXP8_EQ(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetBusVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetBusVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetBusVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetControlMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetControlMode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetControlMode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetError">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetError</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetError</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetFaults</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetFaults</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetForwardLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetHardwareVersion">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetHardwareVersion</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetHardwareVersion</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="messageID">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageID</parameter>
            <parameter>M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="messageMask">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageMask</parameter>
            <parameter>M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.CANJaguar.GetMessage(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.GetOutputCurrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetOutputCurrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetOutputCurrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetOutputVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetReverseLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetSpeed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetSpeed</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetSpeed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANJaguar.GetTemperature">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.GetTemperature</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANJaguar.GetTemperature</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.CANJaguar.I">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.I</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.InitTable(NetworkTables.Tables.ITable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="subtable">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>subtable</parameter>
            <parameter>M:WPILib.CANJaguar.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kApproxBusVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kApproxBusVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kButVoltageFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kButVoltageFault</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kControllerRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kControllerRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kCurrentFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kCurrentFault</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kGateDriverFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kGateDriverFault</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kMaxMessageDataSize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kMaxMessageDataSize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.CANJaguar.kTemeperatureFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.CANJaguar.kTemeperatureFault</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.LimitMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.LimitMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.MaxOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.MaxOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.P">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.P</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.PidWrite(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.PidWrite(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANJaguar.PidWrite(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.PotentiometerTurns">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.PotentiometerTurns</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.RequestMessage(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.RequestMessage(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="messageID">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageID</parameter>
            <parameter>M:WPILib.CANJaguar.RequestMessage(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.RequestMessage(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.RequestMessage(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="messageID">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageID</parameter>
            <parameter>M:WPILib.CANJaguar.RequestMessage(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.CANJaguar.RequestMessage(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.ReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.ReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.SafetyEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.SafetyEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="messageID">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageID</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dataSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataSize</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="messageID">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>messageID</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dataSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataSize</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.CANJaguar.SendMessage(System.Int32,System.Byte[],System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.Set(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Set(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANJaguar.Set(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.Set(System.Double,System.Byte)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANJaguar.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </param>
      <param name="syncGroup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>syncGroup</parameter>
            <parameter>M:WPILib.CANJaguar.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="codesPerRev">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>codesPerRev</parameter>
            <parameter>M:WPILib.CANJaguar.SetCurrentMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.SetPercentMode(WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetPercentMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:WPILib.CANJaguar.SetPercentMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="codesPerRev">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>codesPerRev</parameter>
            <parameter>M:WPILib.CANJaguar.SetPercentMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.CANJaguar.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.Setpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Setpoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="codesPerRev">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>codesPerRev</parameter>
            <parameter>M:WPILib.CANJaguar.SetSpeedMode(System.Double,System.Double,System.Double,WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.SetupPeriodicStatus">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetupPeriodicStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.SetVoltageMode(WPILib.CANJaguar.SourceMode,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.SetVoltageMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:WPILib.CANJaguar.SetVoltageMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="codesPerRev">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>codesPerRev</parameter>
            <parameter>M:WPILib.CANJaguar.SetVoltageMode(WPILib.CANJaguar.SourceMode,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANJaguar.SmartDashboardType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.SmartDashboardType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StartLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.StartLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StopLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.StopLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.StopMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.StopMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.Table">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.Table</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.UpdatePeriodicStatus">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.UpdatePeriodicStatus</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.UpdateSyncGroup(System.Byte)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.UpdateSyncGroup(System.Byte)</parameter>
          </include>
        </markup>
      </summary>
      <param name="syncGroup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>syncGroup</parameter>
            <parameter>M:WPILib.CANJaguar.UpdateSyncGroup(System.Byte)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.UpdateTable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.UpdateTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.CANJaguar.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANJaguar.Verify">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANJaguar.Verify</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANJaguar.VoltageRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANJaguar.VoltageRampRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CANJaguar.SourceMode">
      <summary>
            The source mode for the CAN Jaguar
            </summary>
    </member>
    <member name="F:WPILib.CANJaguar.SourceMode.Encoder"></member>
    <member name="F:WPILib.CANJaguar.SourceMode.QuadEncoder"></member>
    <member name="F:WPILib.CANJaguar.SourceMode.Potentiometer"></member>
    <member name="F:WPILib.CANJaguar.SourceMode.None"></member>
    <member name="T:WPILib.CANTalon">
      <summary>
            This Class represents a CAN Talon SRX Motor Controller.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CANTalon</parameter>
          </include>
        </markup>
      </summary>
      <param name="deviceNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deviceNumber</parameter>
            <parameter>M:WPILib.CANTalon.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="controlPeriodMs">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>controlPeriodMs</parameter>
            <parameter>M:WPILib.CANTalon.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.Alive">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Alive</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.ClearIAccum">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ClearIAccum</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.ClearStickyFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ClearStickyFaults</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.CloseLoopRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.CloseLoopRampRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.ConfigFwdLimitSwitchNormallyOpen(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ConfigFwdLimitSwitchNormallyOpen(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.ConfigFwdLimitSwitchNormallyOpen(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.ConfigNeutralMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ConfigNeutralMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.ConfigRevLimitSwitchNormallyOpen(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ConfigRevLimitSwitchNormallyOpen(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.ConfigRevLimitSwitchNormallyOpen(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="forwardLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forwardLimitPosition</parameter>
            <parameter>M:WPILib.CANTalon.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseLimitPosition</parameter>
            <parameter>M:WPILib.CANTalon.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.ControlEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ControlEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.D">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.D</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Delete">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Delete</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.Description">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Description</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.DeviceID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.DeviceID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Disable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Disable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.DisableControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.DisableControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.DisableSoftPositionLimits">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.DisableSoftPositionLimits</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>WPILib.CANTalon</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Enable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Enable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.EnableBrakeMode(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.EnableBrakeMode(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="brake">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>brake</parameter>
            <parameter>M:WPILib.CANTalon.EnableBrakeMode(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.EnableControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.EnableControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.Enabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Enabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.EnableLimitSwitches(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.EnableLimitSwitches(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="forward">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forward</parameter>
            <parameter>M:WPILib.CANTalon.EnableLimitSwitches(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverse">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverse</parameter>
            <parameter>M:WPILib.CANTalon.EnableLimitSwitches(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.EncoderCodesPerRev">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.EncoderCodesPerRev</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.Expiration">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Expiration</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.F">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.F</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultForwardSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultForwardSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultHardwareFailure">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultHardwareFailure</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultOverTemp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultOverTemp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultReverseSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultReverseSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultTime">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FaultUnderVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FaultUnderVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FeedBackDevice">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FeedBackDevice</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.FirmwareVersion">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.FirmwareVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardLimitSwitchNormallyOpen">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ForwardLimitSwitchNormallyOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ForwardSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ForwardSoftLimitEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ForwardSoftLimitEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInRaw">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInRaw</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInRaw</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetAnalogInVelocity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInVelocity</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetAnalogInVelocity</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetBusVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetBusVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetBusVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetClosedLoopError">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetClosedLoopError</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetClosedLoopError</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetCloseLoopRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetCloseLoopRampRate</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetCloseLoopRampRate</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetControlMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetControlMode</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetControlMode</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetDeviceID">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetDeviceID</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetDeviceID</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetEncoderPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetEncoderPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetEncoderPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetEncoderVelocity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetEncoderVelocity</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetEncoderVelocity</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetError">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetError</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetError</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetF">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetF</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetF</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetFaults</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetFaults</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetFeedbackDevice">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetFeedbackDevice</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetFeedbackDevice</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetForwardLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetForwardSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardSoftLimit</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardSoftLimit</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetForwardSoftLimitEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardSoftLimitEnabled</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetForwardSoftLimitEnabled</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetIaccum">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetIaccum</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetIaccum</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetIZone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetIZone</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetIZone</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetNumberOfQuadIdxRises">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetNumberOfQuadIdxRises</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetNumberOfQuadIdxRises</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetOutputCurrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetOutputCurrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetOutputCurrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetOutputVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadA">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadA</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadA</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadB">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadB</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadB</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPinStateQuadIdx">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadIdx</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetPinStateQuadIdx</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetProfile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetProfile</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetProfile</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetReverseLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetReverseSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseSoftLimit</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseSoftLimit</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetReverseSoftLimitEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseSoftLimitEnabled</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetReverseSoftLimitEnabled</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetSetpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetSetpoint</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetSetpoint</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetSpeed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetSpeed</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetSpeed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetTemperature">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetTemperature</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetTemperature</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.GetVoltageRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.GetVoltageRampRate</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.GetVoltageRampRate</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.CANTalon.I">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.I</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.CANTalon.Inverted">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Inverted</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.IsBreakEnabledduringNeutral">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.IsBreakEnabledduringNeutral</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.IsBreakEnabledduringNeutral</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.IsControlEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.IsControlEnabled</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.IsControlEnabled</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.IsForwardLimitSwitchClosed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.IsForwardLimitSwitchClosed</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.IsForwardLimitSwitchClosed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.CANTalon.IsReverseLimitSwitchClosed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.IsReverseLimitSwitchClosed</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.CANTalon.IsReverseLimitSwitchClosed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.CANTalon.IZone">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.IZone</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.LimitMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.LimitMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.MaxOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.MaxOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.MotorControlMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.MotorControlMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.P">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.P</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.PidWrite(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.PidWrite(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.PidWrite(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.PotentiometerTurns">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.PotentiometerTurns</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.Profile">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Profile</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseLimitSwitchNormallyOpen">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ReverseLimitSwitchNormallyOpen</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.ReverseOutput(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ReverseOutput(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="flip">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flip</parameter>
            <parameter>M:WPILib.CANTalon.ReverseOutput(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.ReverseSensor(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ReverseSensor(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="flip">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>flip</parameter>
            <parameter>M:WPILib.CANTalon.ReverseSensor(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.ReverseSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ReverseSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.ReverseSoftLimitEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.ReverseSoftLimitEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.SafetyEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.SafetyEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.SelectProfileSlot(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SelectProfileSlot(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="slotIdx">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>slotIdx</parameter>
            <parameter>M:WPILib.CANTalon.SelectProfileSlot(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.Set(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Set(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.Set(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.Set(System.Double,System.Byte)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </param>
      <param name="syncGroup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>syncGroup</parameter>
            <parameter>M:WPILib.CANTalon.Set(System.Double,System.Byte)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetCloseLoopRampRate(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetCloseLoopRampRate(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="rate">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rate</parameter>
            <parameter>M:WPILib.CANTalon.SetCloseLoopRampRate(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetControlMode(WPILib.Interfaces.ControlMode)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetControlMode(WPILib.Interfaces.ControlMode)</parameter>
          </include>
        </markup>
      </summary>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:WPILib.CANTalon.SetControlMode(WPILib.Interfaces.ControlMode)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetF(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetF(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.CANTalon.SetF(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetFeedbackDevice(WPILib.CANTalon.FeedbackDevice)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetFeedbackDevice(WPILib.CANTalon.FeedbackDevice)</parameter>
          </include>
        </markup>
      </summary>
      <param name="device">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>device</parameter>
            <parameter>M:WPILib.CANTalon.SetFeedbackDevice(WPILib.CANTalon.FeedbackDevice)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetForwardSoftLimit(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetForwardSoftLimit(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.SetForwardSoftLimit(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetForwardSoftLimitEnabled(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetForwardSoftLimitEnabled(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.SetForwardSoftLimitEnabled(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetIZone(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetIZone(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="iZone">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>iZone</parameter>
            <parameter>M:WPILib.CANTalon.SetIZone(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="izone">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>izone</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="closeLoopRampRate">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>closeLoopRampRate</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="profile">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>profile</parameter>
            <parameter>M:WPILib.CANTalon.SetPID(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Double,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.Setpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.Setpoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.SetPosition(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetPosition(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pos">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pos</parameter>
            <parameter>M:WPILib.CANTalon.SetPosition(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetProfile(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetProfile(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="profile">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>profile</parameter>
            <parameter>M:WPILib.CANTalon.SetProfile(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetReverseSoftLimit(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetReverseSoftLimit(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.SetReverseSoftLimit(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetReverseSoftLimitEnabled(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetReverseSoftLimitEnabled(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.SetReverseSoftLimitEnabled(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.CANTalon.SetVoltageRampRate(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.SetVoltageRampRate(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="rate">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>rate</parameter>
            <parameter>M:WPILib.CANTalon.SetVoltageRampRate(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultForwardSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultForwardSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultOverTemp">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultOverTemp</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultReverseSoftLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultReverseSoftLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.StickyFaultUnderVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.StickyFaultUnderVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.CANTalon.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.StopMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.StopMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.CANTalon.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.CANTalon.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.CANTalon.VoltageRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.CANTalon.VoltageRampRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CANTalon.FeedbackDevice">
      <summary>
            Feedback type for CAN Talon
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.QuadEncoder"></member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.AnalogPotentiometer"></member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.AnalogEncoder"></member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.EncoderRising"></member>
    <member name="F:WPILib.CANTalon.FeedbackDevice.EncoderFalling"></member>
    <member name="T:WPILib.CANTalon.StatusFrameRate">
      <summary>
            Status Rate for CAN Talon
            </summary>
    </member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.General"></member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.Feedback"></member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.QuadEncoder"></member>
    <member name="F:WPILib.CANTalon.StatusFrameRate.AnalogTempVbat"></member>
    <member name="T:WPILib.Compressor">
      <summary>
            Class for operating the PCM Compressor. The PWM will automatically run in close-loop mode
            by default whenever a <see cref="T:WPILib.Solenoid" /> object is created.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.#ctor">
      <summary>
            Create an instance of the <see cref="T:WPILib.Compressor" /> class using the default module.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.#ctor(System.Int32)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Compressor" /> class
            </summary>
      <param name="pcmId">The PCM CAN device ID.</param>
    </member>
    <member name="M:WPILib.Compressor.ClearAllPCMStickyFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.ClearAllPCMStickyFaults</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Compressor.ClosedLoopControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Compressor.ClosedLoopControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Compressor.Enabled">
      <summary>
            Gets whether the compressor is enabled.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.Enabled</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorCurrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorCurrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorCurrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorCurrentTooHighFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorCurrentTooHighFault</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorCurrentTooHighFault</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorNotConnectedFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorNotConnectedFault</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorNotConnectedFault</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorNotConnectedStickyFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorNotConnectedStickyFault</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorNotConnectedStickyFault</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorShortedFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorShortedFault</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorShortedFault</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetCompressorShortedStickyFault">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorShortedStickyFault</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetCompressorShortedStickyFault</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.GetPressureSwitchValue">
      <summary>
            Gets the value of the pressure switch.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Compressor.GetPressureSwitchValue</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Compressor.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Compressor.SmartDashboardType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Compressor.SmartDashboardType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Compressor.Start">
      <summary>
            Start the compressor running in closed loop control mode.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.StartLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.StartLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Compressor.Stop">
      <summary>
            Stop the compressor from running in closed loop control mode.
            </summary>
    </member>
    <member name="M:WPILib.Compressor.StopLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.StopLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Compressor.Table">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Compressor.Table</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Compressor.UpdateTable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Compressor.UpdateTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.ControllerPower">
      <summary>
            This Class is used to get the voltages and currents from the power rails
            on the RoboRIO. See <see cref="T:WPILib.PowerDistributionPanel" /> for PDP rails.
            </summary>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent3V3">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent3V3</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent3V3</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent5V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent5V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent5V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetCurrent6V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent6V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetCurrent6V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled3V3">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled3V3</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled3V3</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled5V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled5V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled5V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetEnabled6V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled6V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetEnabled6V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount3V3">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount3V3</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount3V3</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount5V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount5V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount5V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetFaultCount6V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount6V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetFaultCount6V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetInputCurrrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetInputCurrrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetInputCurrrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetInputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetInputVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetInputVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage3V3">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage3V3</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage3V3</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage5V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage5V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage5V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.ControllerPower.GetVoltage6V">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage6V</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.ControllerPower.GetVoltage6V</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:WPILib.Counter">
      <summary>
            Class for counting the number of ticks on a digital input channel.
            </summary>
    </member>
    <member name="M:WPILib.Counter.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Counter.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.AnalogTrigger)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
      <param name="trigger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>trigger</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.AnalogTrigger)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
      <param name="encodingType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>encodingType</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="upSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>upSource</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="downSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>downSource</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="inverted">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>inverted</parameter>
            <parameter>M:WPILib.Counter.#ctor(WPILib.Interfaces.EncodingType,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.ClearDownSource">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.ClearDownSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.ClearUpSource">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.ClearUpSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.Direction">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.Direction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>WPILib.Counter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.Distance">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.Distance</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.DistancePerPulse">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.DistancePerPulse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.FPGAIndex">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.FPGAIndex</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Counter.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Counter.GetPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.GetPeriod</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Counter.GetPeriod</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Counter.GetStopped">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.GetStopped</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Counter.GetStopped</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Counter.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Counter.MaxPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.MaxPeriod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.PidGet">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.PidGet</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Counter.PidGet</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Counter.PIDSourceParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.PIDSourceParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.Rate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.Rate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Counter.SamplesToAverage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.SamplesToAverage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="analogTrigger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>analogTrigger</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </param>
      <param name="triggerType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>triggerType</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetDownSource(WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Counter.SetDownSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetDownSourceEdge(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetDownSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="risingEdge">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>risingEdge</parameter>
            <parameter>M:WPILib.Counter.SetDownSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="fallingEdge">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fallingEdge</parameter>
            <parameter>M:WPILib.Counter.SetDownSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetExternalDirectionMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetExternalDirectionMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.SetPulseLengthMode(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetPulseLengthMode(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="threshold">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>threshold</parameter>
            <parameter>M:WPILib.Counter.SetPulseLengthMode(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetSemiPeriodMode(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetSemiPeriodMode(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="highSemiPeriod">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>highSemiPeriod</parameter>
            <parameter>M:WPILib.Counter.SetSemiPeriodMode(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetUpDownCounterMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetUpDownCounterMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="analogTrigger">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>analogTrigger</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </param>
      <param name="triggerType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>triggerType</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(WPILib.AnalogTrigger,HAL_Base.AnalogTriggerType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetUpSource(WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Counter.SetUpSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Counter.SetUpSourceEdge(System.Boolean,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Counter.SetUpSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="risingEdge">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>risingEdge</parameter>
            <parameter>M:WPILib.Counter.SetUpSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="fallingEdge">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>fallingEdge</parameter>
            <parameter>M:WPILib.Counter.SetUpSourceEdge(System.Boolean,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Counter.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Counter.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Counter.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Counter.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Counter.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="P:WPILib.Counter.UpdateWhenEmpty">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Counter.UpdateWhenEmpty</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.DigitalInput">
      <summary>
            Class to read a digital input
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.#ctor(System.Int32)">
      <summary>
            Create an instance of a Digital Input
            </summary>
      <param name="channel">The DIO channel for the digital input 0-9 are on-board, 10-25 are on the MXP</param>
    </member>
    <member name="P:WPILib.DigitalInput.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger?
            </summary>
    </member>
    <member name="P:WPILib.DigitalInput.Channel">
      <summary>
            Get the channel of the digital input.
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.Get">
      <summary>
            Get the value from the Digital Input Channel
            </summary>
      <returns>The status of the digital input</returns>
    </member>
    <member name="M:WPILib.DigitalInput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.DigitalInput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DigitalInput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalInput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.DigitalOutput">
      <summary>
            Class to write digital outputs.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.#ctor(System.Int32)">
      <summary>
            Create an instance of a digital output.
            </summary>
      <param name="channel">The DIO channel to use for the digital output. 0-9 are on-board, 10-25 are on the MXP</param>
    </member>
    <member name="P:WPILib.DigitalOutput.Channel">
      <summary>
            Get the GPIO channel number that this object represents.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.DisablePWM">
      <summary>
            Change this line from a PWM output back to a static Digital Output line.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.Dispose">
      <summary>
            Free the resources associated with a digital output
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.EnablePWM(System.Double)">
      <summary>
            Enable a PWM output on the line.
            </summary>
      <param name="initialDutyCycle">The duty cycle to start generating. [0..1]</param>
    </member>
    <member name="M:WPILib.DigitalOutput.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.DigitalOutput.Pulse(System.Int32)">
      <summary>
            Write a pulse to the digital output.
            There can only be a single pulse going at any time.
            </summary>
      <param name="pulseLength">The length of the pulse</param>
    </member>
    <member name="M:WPILib.DigitalOutput.Pulse(System.Single)">
      <summary>
            Write a pulse to the digital output.
            There can only be a single pulse going at any time.
            </summary>
      <param name="pulseLength">The length of the pulse</param>
    </member>
    <member name="P:WPILib.DigitalOutput.Pulsing">
      <summary>
            Returns if the pulse is still going.
            </summary>
    </member>
    <member name="P:WPILib.DigitalOutput.PWMRate">
      <summary>
            Set the PWM frequency of the PWM output. The valid range is from 0.6Hz to 19kHz.
            <para />There is only 1 frequency for all channels.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.Set(System.Boolean)">
      <summary>
            Set the value of the digital output.
            </summary>
      <param name="value">True if on, false if off.</param>
    </member>
    <member name="P:WPILib.DigitalOutput.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DigitalOutput.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.UpdateDutyCycle(System.Double)">
      <summary>
            Change the duty cycle that is being generated on the line.
            The resolution of the duty cycle is 8-bit for low frequencies,
            but is reduced the higher the frequency of the PWM signal.
            </summary>
      <param name="value">The duty-cycle to change to. [0..1]</param>
    </member>
    <member name="M:WPILib.DigitalOutput.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
            This is called by the network tables whenever the value is updated.
            </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.DigitalOutput.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.DigitalSource">
      <summary>
            DigitalSource interface
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.DigitalSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.DigitalSource.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger.
            </summary>
    </member>
    <member name="P:WPILib.DigitalSource.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.Dispose">
      <summary>
            Destructor
            </summary>
    </member>
    <member name="M:WPILib.DigitalSource.InitDigitalPort(System.Int32,System.Boolean)">
      <summary>
            Base Initialization function for all Ports.
            </summary>
      <param name="channel">The channel the port is connected too</param>
      <param name="input">True if port is input, false if output</param>
    </member>
    <member name="F:WPILib.DigitalSource.m_channel">
      <summary>
            The channel this source is connected to
            </summary>
    </member>
    <member name="F:WPILib.DigitalSource.m_port">
      <summary>
            The Port this source is attached to.
            </summary>
    </member>
    <member name="P:WPILib.DigitalSource.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="F:WPILib.DigitalSource.s_channels">
      <summary>
            A collection of the Digital Sources.
            </summary>
    </member>
    <member name="T:WPILib.DoubleSolenoid">
      <summary>
            Class for running 2 channels of High Voltage Digital Output from the PCM.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.DoubleSolenoid</parameter>
          </include>
        </markup>
      </summary>
      <param name="forwardChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forwardChannel</parameter>
            <parameter>M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseChannel</parameter>
            <parameter>M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.DoubleSolenoid</parameter>
          </include>
        </markup>
      </summary>
      <param name="moduleNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>moduleNumber</parameter>
            <parameter>M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="forwardChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forwardChannel</parameter>
            <parameter>M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseChannel</parameter>
            <parameter>M:WPILib.DoubleSolenoid.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="P:WPILib.DoubleSolenoid.FwdSolenoidBlackListed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.DoubleSolenoid.FwdSolenoidBlackListed</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DoubleSolenoid.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.DoubleSolenoid.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.DoubleSolenoid.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.DoubleSolenoid.RevSolenoidBlackListed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.DoubleSolenoid.RevSolenoidBlackListed</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.Set(WPILib.DoubleSolenoid.Value)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DoubleSolenoid.Set(WPILib.DoubleSolenoid.Value)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.DoubleSolenoid.Set(WPILib.DoubleSolenoid.Value)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.DoubleSolenoid.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.DoubleSolenoid.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
            Not called externally. Just needed because its an interface.
            </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.DoubleSolenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.DoubleSolenoid.Value">
      <summary>
            Values allowed for <see cref="T:WPILib.DoubleSolenoid">Double Solenoids</see>.
            </summary>
    </member>
    <member name="F:WPILib.DoubleSolenoid.Value.Off"></member>
    <member name="F:WPILib.DoubleSolenoid.Value.Forward"></member>
    <member name="F:WPILib.DoubleSolenoid.Value.Reverse"></member>
    <member name="T:WPILib.DriverStation">
      <summary>
            Provides access to the network communication data to/from the Driver Station.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.#ctor">
      <summary>
            Driver Station constructor
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Autonomous">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in autonomous mode.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.BrownedOut">
      <summary>
            Gets if the system is browned out.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Disabled">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be disabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.DSAtached">
      <summary>
            Gets if the DS is attached.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Enabled">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be enabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.FMSAttached">
      <summary>
            Gets if the FMS is attached.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.GetAlliance">
      <summary>
            Gets the current alliance and station from the FMS.
            </summary>
      <returns>The current alliance</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetBatteryVoltage">
      <summary>
            Reads the battery voltage
            </summary>
      <returns>The battery voltage in Volts.</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetData">
      <summary>
            Grabs the newest Joystick data and stores it
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickIsXbox(System.Int32)">
      <summary>
            Gets if the joystick is an xbox controller.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>True if the joystick is an xbox controller.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickName(System.Int32)">
      <summary>
            Gets the name of the joystick.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The joystick name</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetJoystickType(System.Int32)">
      <summary>
            Gets the type of joystick
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The joystick type</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetLocation">
      <summary>
            Gets the driver station number.
            </summary>
      <returns>The driver station number (1, 2 or 3)</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetMatchTime">
      <summary>
            Get the approximate match time.
            </summary>
      <returns>The time remaining in the current match period in seconds.</returns>
    </member>
    <member name="M:WPILib.DriverStation.GetStickAxis(System.Int32,System.Int32)">
      <summary>
            Gets the value of an axis on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="axis">The axis to read.</param>
      <returns>The value of the axis from -1.0 to 1.0</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick or axis are out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickAxisCount(System.Int32)">
      <summary>
            Returns the number of axes on a given joystick port.
            </summary>
      <param name="stick">The joystick to check</param>
      <returns>The number of axes on the joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButton(System.Int32,System.Byte)">
      <summary>
            Gets the state of one joystick button. Button indexes begin at 1.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="button">The button index</param>
      <returns>The state of the joystick button.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButtonCount(System.Int32)">
      <summary>
            Gets the number of buttons on a joystick.
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The number of buttons on the joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickButtons(System.Int32)">
      <summary>
            The state of the buttons on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <returns>The state of the buttons</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickPOV(System.Int32,System.Int32)">
      <summary>
            Returns the state of a POV on the joystick.
            </summary>
      <param name="stick">The joystick to read</param>
      <param name="pov">The POV to read</param>
      <returns>The angle of the POV in degrees, or -1 if the POV is not pressed.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick or povs are out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.GetStickPOVCount(System.Int32)">
      <summary>
            Returns the number of POVs on a given joystick port
            </summary>
      <param name="stick">The joystick port number</param>
      <returns>The number of POVs on the indicated joystick.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the stick is out of range.</exception>
    </member>
    <member name="M:WPILib.DriverStation.InAutonomous(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DriverStation.InAutonomous(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="entering">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entering</parameter>
            <parameter>M:WPILib.DriverStation.InAutonomous(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.DriverStation.InDisabled(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DriverStation.InDisabled(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="entering">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entering</parameter>
            <parameter>M:WPILib.DriverStation.InDisabled(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.DriverStation.InOperatorControl(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DriverStation.InOperatorControl(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="entering">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entering</parameter>
            <parameter>M:WPILib.DriverStation.InOperatorControl(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.DriverStation.Instance">
      <summary>
            Gets the instance of the driver station.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.InTest(System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.DriverStation.InTest(System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="entering">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>entering</parameter>
            <parameter>M:WPILib.DriverStation.InTest(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.DriverStation.NewControlData">
      <summary>
            Gets whether a new control packet from the driver station has arrived since
            the last time this was called.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.OperatorControl">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in operator-controlled mode.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.Release">
      <summary>
            Stops the driver station thread
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.ReportError(System.String,System.Boolean)">
      <summary>
            Report an error to the driver station.
            </summary>
      <param name="error">The error to send</param>
      <param name="printTrace">If true, append stack trace to error string</param>
    </member>
    <member name="P:WPILib.DriverStation.SysActive">
      <summary>
            Gets a value indicating whether the FPGA outputs are enabled.
            </summary>
    </member>
    <member name="P:WPILib.DriverStation.Test">
      <summary>
            Gets a value indicating whether the Driver Station requires the robot to be
            running in test mode.
            </summary>
    </member>
    <member name="M:WPILib.DriverStation.WaitForData(System.Int64)">
      <summary>
            Wait for new data from the driver station.
            </summary>
      <param name="timeout">The timeout in ms</param>
    </member>
    <member name="T:WPILib.DriverStation.Alliance">
      <summary>
            Alliance value enum.
            </summary>
    </member>
    <member name="F:WPILib.DriverStation.Alliance.Red"></member>
    <member name="F:WPILib.DriverStation.Alliance.Blue"></member>
    <member name="F:WPILib.DriverStation.Alliance.Invalid"></member>
    <member name="T:WPILib.Encoder">
      <summary>
            Class to read quadrature encoders.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="bChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="bChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="encodingType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>encodingType</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="bChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="indexChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>indexChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="indexChannel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>indexChannel</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
      <param name="bSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="bSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="encodingType">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>encodingType</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean,WPILib.Interfaces.EncodingType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
      <param name="bSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
      <param name="indexSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>indexSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
      <param name="aSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>aSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="indexSource">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>indexSource</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseDirection">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseDirection</parameter>
            <parameter>M:WPILib.Encoder.#ctor(WPILib.DigitalSource,WPILib.DigitalSource,WPILib.DigitalSource,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Encoder.Direction">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.Direction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Encoder.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>WPILib.Encoder</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.DistancePerPulse">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.DistancePerPulse</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.EncodingScale">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.EncodingScale</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.FPGAIndex">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.FPGAIndex</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Encoder.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.GetDistance">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.GetDistance</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.GetDistance</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.GetPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.GetPeriod</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.GetPeriod</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.GetRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.GetRate</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.GetRate</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.GetRaw">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.GetRaw</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.GetRaw</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.GetStopped">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.GetStopped</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.GetStopped</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Encoder.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="F:WPILib.Encoder.m_aSource">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Encoder.m_aSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Encoder.m_bSource">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Encoder.m_bSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Encoder.m_indexSource">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Encoder.m_indexSource</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.MaxPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.MaxPeriod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.MinRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.MinRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Encoder.PidGet">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.PidGet</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Encoder.PidGet</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Encoder.PIDSourceParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.PIDSourceParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Encoder.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.ReverseDirection">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.ReverseDirection</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Encoder.SamplesToAverage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Encoder.SamplesToAverage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(System.Int32,WPILib.Encoder.IndexingType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(System.Int32,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(System.Int32,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(System.Int32,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource,WPILib.Encoder.IndexingType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </param>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:WPILib.Encoder.SetIndexSource(WPILib.DigitalSource,WPILib.Encoder.IndexingType)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Encoder.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Encoder.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Encoder.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Encoder.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Encoder.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Encoder.IndexingType">
      <summary>
            Encoder Indexing Type Enum
            </summary>
    </member>
    <member name="F:WPILib.Encoder.IndexingType.ResetWhileHigh"></member>
    <member name="F:WPILib.Encoder.IndexingType.ResetWhileLow"></member>
    <member name="F:WPILib.Encoder.IndexingType.ResetOnFallingEdge"></member>
    <member name="F:WPILib.Encoder.IndexingType.ResetOnRisingEdge"></member>
    <member name="T:WPILib.FlowControl">
      <summary>
            Specifies the FlowControl settings for a <see cref="T:WPILib.SerialPort" /> object
            </summary>
    </member>
    <member name="F:WPILib.FlowControl.None"></member>
    <member name="F:WPILib.FlowControl.XonXoff"></member>
    <member name="F:WPILib.FlowControl.RtsCts"></member>
    <member name="F:WPILib.FlowControl.DtrDsr"></member>
    <member name="T:WPILib.GearTooth">
      <summary>
            Alias for counter class.
            </summary>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(System.Int32)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a channel.
            </summary>
      <param name="channel">The GPIO channel that the sensor is
            connected to.</param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(System.Int32,System.Boolean)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a channel.
            </summary>
      <param name="channel">The GPIO channel that the sensor is
            connected to.</param>
      <param name="directionSensitive">True to enable direction sensing.</param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(WPILib.DigitalSource)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a <see cref="T:WPILib.DigitalSource" />.
            </summary>
      <param name="source">An existing <see cref="T:WPILib.DigitalSource" /> object 
            (such as a <see cref="T:WPILib.DigitalInput" /></param>
    </member>
    <member name="M:WPILib.GearTooth.#ctor(WPILib.DigitalSource,System.Boolean)">
      <summary>
            Construct a <see cref="T:WPILib.GearTooth" /> sensor given a <see cref="T:WPILib.DigitalSource" />.
            </summary>
      <param name="source">An existing <see cref="T:WPILib.DigitalSource" /> object 
            (such as a <see cref="T:WPILib.DigitalInput" /></param>
      <param name="directionSensitive">True to enable direction sensing.</param>
    </member>
    <member name="P:WPILib.GearTooth.DirectionSensing">
      <summary>
            Sets whether the GearTooth sensor is direction sensing.
            </summary>
    </member>
    <member name="T:WPILib.GenericHID">
      <summary>
            GenericHID Interface
            </summary>
    </member>
    <member name="M:WPILib.GenericHID.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.GenericHID</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.GenericHID.GetBumper">
      <summary>
            Is the bumper pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetBumper(WPILib.Hand)">
      <summary>
            Is the bumper pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the bumper for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetPOV">
      <summary>
            Is POV 0 pressed
            </summary>
      <returns>the POV value</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetPOV(System.Int32)">
      <summary>
            Is the given POV pressed
            </summary>
      <param name="pov">Which POV number</param>
      <returns>the POV value</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetRawAxis(System.Int32)">
      <summary>
            Get the raw axis
            </summary>
      <param name="which">Index of the axis</param>
      <returns>The raw value of the selected axis</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetRawButton(System.Int32)">
      <summary>
            Is the given button pressed
            </summary>
      <param name="button">Which button number</param>
      <returns>True if the button is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetThrottle">
      <summary>
            Get the Throttle Value
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.GenericHID.GetThrottle</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTop">
      <summary>
            Is the top button pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTop(WPILib.Hand)">
      <summary>
            Is the top button pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the top button for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTrigger">
      <summary>
            Is the trigger pressed
            </summary>
      <returns>True if pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTrigger(WPILib.Hand)">
      <summary>
            Is the trigger pressed
            </summary>
      <param name="hand">Which hand</param>
      <returns>True if the trigger for the given hand is pressed</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetTwist">
      <summary>
            Get the twist value
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.GenericHID.GetTwist</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.GenericHID.GetX">
      <summary>
            Get the x position of the HID
            </summary>
      <returns>The x position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetX(WPILib.Hand)">
      <summary>
            Get the x position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The x position</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetY">
      <summary>
            Get the y position of the HID
            </summary>
      <returns>The y position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetY(WPILib.Hand)">
      <summary>
            Get the y position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The y position</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetZ">
      <summary>
            Get the z position of the HID
            </summary>
      <returns>The z position of the HID</returns>
    </member>
    <member name="M:WPILib.GenericHID.GetZ(WPILib.Hand)">
      <summary>
            Get the z position of the HID
            </summary>
      <param name="hand">Which hand, left or right</param>
      <returns>The z position</returns>
    </member>
    <member name="T:WPILib.Gyro">
      <summary>
            Class for interfacing with an analog gyro to get robot heading.
            </summary>
    </member>
    <member name="M:WPILib.Gyro.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Gyro</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Gyro.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Gyro.#ctor(WPILib.AnalogInput)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Gyro</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Gyro.#ctor(WPILib.AnalogInput)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Gyro.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.Gyro.GetAngle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Gyro.GetAngle</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Gyro.GetAngle</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Gyro.GetRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Gyro.GetRate</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Gyro.GetRate</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Gyro.InitGyro">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Gyro.InitGyro</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Gyro.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="F:WPILib.Gyro.m_analog">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Gyro.m_analog</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Gyro.PidGet">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Gyro.PidGet</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Gyro.PidGet</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Gyro.PIDSourceParameter">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Gyro.PIDSourceParameter</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Gyro.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Gyro.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Gyro.Sensitivity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Gyro.Sensitivity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Gyro.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Gyro.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Gyro.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Gyro.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Gyro.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Hand">
      <summary>
            Which hand the Human Interface Device is associated with.
            </summary>
    </member>
    <member name="F:WPILib.Hand.Left"></member>
    <member name="F:WPILib.Hand.Right"></member>
    <member name="T:WPILib.HLUsageReporting">
      <summary>
            Support for High Level Usage Reporting.
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.HLUsageReporting</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.HLUsageReporting.Implementation">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.HLUsageReporting.Implementation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportPIDController(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.ReportPIDController(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="num">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>num</parameter>
            <parameter>M:WPILib.HLUsageReporting.ReportPIDController(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportScheduler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.ReportScheduler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.ReportSmartDashboard">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.ReportSmartDashboard</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.HLUsageReporting.Interface">
      <summary>
            The interface to use for High Level usage reporting.
            </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportPIDController(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.Interface.ReportPIDController(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="num">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>num</parameter>
            <parameter>M:WPILib.HLUsageReporting.Interface.ReportPIDController(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportScheduler">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.Interface.ReportScheduler</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.HLUsageReporting.Interface.ReportSmartDashboard">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.HLUsageReporting.Interface.ReportSmartDashboard</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.I2C">
      <summary>
            I2C bus interface class.
            </summary>
    </member>
    <member name="M:WPILib.I2C.#ctor(WPILib.I2C.Port,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.I2C</parameter>
          </include>
        </markup>
      </summary>
      <param name="port">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>port</parameter>
            <parameter>M:WPILib.I2C.#ctor(WPILib.I2C.Port,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="deviceAddress">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deviceAddress</parameter>
            <parameter>M:WPILib.I2C.#ctor(WPILib.I2C.Port,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.I2C.AddressOnly">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.AddressOnly</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.AddressOnly</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.Broadcast(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.Broadcast(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="registerAddress">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>registerAddress</parameter>
            <parameter>M:WPILib.I2C.Broadcast(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.I2C.Broadcast(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.I2C.LVRead(System.Byte[],System.Byte,System.Byte[]@)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.LVRead(System.Byte[],System.Byte,System.Byte[]@)</parameter>
          </include>
        </markup>
      </summary>
      <param name="register">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>register</parameter>
            <parameter>M:WPILib.I2C.LVRead(System.Byte[],System.Byte,System.Byte[]@)</parameter>
          </include>
        </markup>
      </param>
      <param name="bytesToRead">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bytesToRead</parameter>
            <parameter>M:WPILib.I2C.LVRead(System.Byte[],System.Byte,System.Byte[]@)</parameter>
          </include>
        </markup>
      </param>
      <param name="returnData">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>returnData</parameter>
            <parameter>M:WPILib.I2C.LVRead(System.Byte[],System.Byte,System.Byte[]@)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.I2C.LVWrite(System.Byte,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.LVWrite(System.Byte,System.Byte[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="register">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>register</parameter>
            <parameter>M:WPILib.I2C.LVWrite(System.Byte,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="message">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>message</parameter>
            <parameter>M:WPILib.I2C.LVWrite(System.Byte,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="registerAddress">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>registerAddress</parameter>
            <parameter>M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="buffer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>buffer</parameter>
            <parameter>M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.Read(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="buffer">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>buffer</parameter>
            <parameter>M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.ReadOnly(System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dataToSend">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataToSend</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="sendSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>sendSize</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dataRecieved">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataRecieved</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="receiveSize">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>receiveSize</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.Transaction(System.Byte[],System.Int32,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="registerAddress">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>registerAddress</parameter>
            <parameter>M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="count">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>count</parameter>
            <parameter>M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <param name="expected">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>expected</parameter>
            <parameter>M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.VerifySensor(System.Int32,System.Int32,System.Byte[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.Write(System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.Write(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="registerAddress">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>registerAddress</parameter>
            <parameter>M:WPILib.I2C.Write(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.I2C.Write(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.Write(System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.I2C.WriteBulk(System.Byte[])">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.I2C.WriteBulk(System.Byte[])</parameter>
          </include>
        </markup>
      </summary>
      <param name="data">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>data</parameter>
            <parameter>M:WPILib.I2C.WriteBulk(System.Byte[])</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.I2C.WriteBulk(System.Byte[])</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:WPILib.I2C.Port">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:WPILib.I2C.Port</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.I2C.Port.Onboard"></member>
    <member name="F:WPILib.I2C.Port.MXP"></member>
    <member name="T:WPILib.InterruptableSensorBase">
      <summary>
            Base for sensors to be used with interrupts.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.InterruptableSensorBase" />.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.AllocateInterrupts(System.Boolean)">
      <summary>
            Allocate the interrupt.
            </summary>
      <param name="watcher">True if the interrupt should be called in synchronous mode
            where the user program will have to explicitly wait for the interrupt
            to occur.</param>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.AnalogTriggerForRouting">
      <summary>
            Is this an analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.CancelInterrupts">
      <summary>
            Cancel interrupts on this device.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.ChannelForRouting">
      <summary>
            Get the channel routing number.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.DisableInterrupts">
      <summary>
            Disable Interrupts without deallocating structures.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.EnableInterrupts">
      <summary>
            Enable interrupts to occur on this input.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.InterruptIndex">
      <summary>
            Gets the index of the Interrupt
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.m_interrupt">
      <summary>
            The interrupt resource.
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.m_interruptIndex">
      <summary>
            The index of the interrupt
            </summary>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.m_isSynchronousInterrupt">
      <summary>
            Flags if the interrupt being allocated is synchronous.
            </summary>
    </member>
    <member name="P:WPILib.InterruptableSensorBase.ModuleForRouting">
      <summary>
            Get the module routing number.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.ReadFallingTimestanp">
      <summary>
            Return the timestamp for the falling interrupt that occurred most recently.
            </summary>
      <returns>Timestamp in seconds since boot.</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.ReadRisingTimestanp">
      <summary>
            Return the timestamp for the rising interrupt that occurred most recently.
            </summary>
      <returns>Timestamp in seconds since boot.</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts">
      <summary>
            Requests one of the 8 interrupts synchronously on this input.
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts(System.Action)">
      <summary>
            Requests one of the 8 interrupts asynchronously on this input.
            </summary>
      <param name="handler">The callback that will be called whenever 
            there is an interrupt on this device.</param>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.RequestInterrupts(System.Action{System.UInt32,System.Object},System.Object)">
      <summary>
            Requests one of the 8 interrupts asynchronously on this input.
            </summary>
      <param name="handler">The callback that will be called whenever 
            there is an interrupt on this device.</param>
      <param name="param">The object returned when the interrupt occurs.</param>
    </member>
    <member name="F:WPILib.InterruptableSensorBase.s_interrupts">
      <summary>
            Resource manager
            </summary>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.SetUpSourceEdge(System.Boolean,System.Boolean)">
      <summary>
            Set which edge to trigger interrupts on.
            </summary>
      <param name="risingEdge">True to interrupt on the rising edge</param>
      <param name="fallingEdge">True to interrupt on the falling edge</param>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.WaitForInterrupt(System.Double)">
      <summary>
            In synchronous mode, wait for the defined interrupt to occur.
            </summary>
      <param name="timeout">Timeout in seconds</param>
      <returns>The <see cref="T:WPILib.WaitResult" /> of the interrupt</returns>
    </member>
    <member name="M:WPILib.InterruptableSensorBase.WaitForInterrupt(System.Double,System.Boolean)">
      <summary>
            In synchronous mode, wait for the defined interrupt to occur.
            </summary>
      <param name="timeout">Timeout in seconds</param>
      <param name="ignorePrevious">If true, ignore previous interrupts that 
            happened before this was called.</param>
      <returns>The <see cref="T:WPILib.WaitResult" /> of the interrupt</returns>
    </member>
    <member name="T:WPILib.IterativeRobot">
      <summary>
            Implements a iterative robot framework, extending from <see cref="T:WPILib.RobotBase" />.
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.IterativeRobot</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.AutonomousInit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.AutonomousInit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.AutonomousPeriodic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.AutonomousPeriodic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.DisabledInit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.DisabledInit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.DisabledPeriodic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.DisabledPeriodic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.Prestart">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.Prestart</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.RobotInit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.RobotInit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.StartCompetition">
      <summary>
            Provide an alternate "main loop" via startCompetition().
            </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TeleopInit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.TeleopInit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TeleopPeriodic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.TeleopPeriodic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TestInit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.TestInit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.IterativeRobot.TestPeriodic">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.IterativeRobot.TestPeriodic</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Jaguar">
      <summary>
            Texas Instruments / Vex Robotics Jaguar Speed Controller as a PWM Device.
            </summary>
    </member>
    <member name="M:WPILib.Jaguar.#ctor(System.Int32)">
      <summary>
            Creates a new Jaguar Motor Controller in PWM Mode.
            </summary>
      <param name="channel">The PWM channel that the Jaguar is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Jaguar.InitJaguar">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.Joystick">
      <summary>
            Handles inputs from joysticks connected to the driver station.
            </summary>
    </member>
    <member name="M:WPILib.Joystick.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Joystick</parameter>
          </include>
        </markup>
      </summary>
      <param name="port">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>port</parameter>
            <parameter>M:WPILib.Joystick.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Joystick.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Joystick</parameter>
          </include>
        </markup>
      </summary>
      <param name="port">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>port</parameter>
            <parameter>M:WPILib.Joystick.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="numAxisTypes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>numAxisTypes</parameter>
            <parameter>M:WPILib.Joystick.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="numButtonTypes">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>numButtonTypes</parameter>
            <parameter>M:WPILib.Joystick.#ctor(System.Int32,System.Int32,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Joystick.AxisCount">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Joystick.AxisCount</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Joystick.ButtonCount">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Joystick.ButtonCount</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Joystick.GetAxis(WPILib.Joystick.AxisType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetAxis(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="axis">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axis</parameter>
            <parameter>M:WPILib.Joystick.GetAxis(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetAxis(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetAxisChannel(WPILib.Joystick.AxisType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetAxisChannel(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="axis">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axis</parameter>
            <parameter>M:WPILib.Joystick.GetAxisChannel(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetAxisChannel(WPILib.Joystick.AxisType)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetBumper(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetBumper(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetBumper(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetBumper(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetButton(WPILib.Joystick.ButtonType)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetButton(WPILib.Joystick.ButtonType)</parameter>
          </include>
        </markup>
      </summary>
      <param name="button">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>button</parameter>
            <parameter>M:WPILib.Joystick.GetButton(WPILib.Joystick.ButtonType)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetButton(WPILib.Joystick.ButtonType)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetDirectionDegrees">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetDirectionDegrees</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetDirectionDegrees</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetDirectionRadians">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetDirectionRadians</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetDirectionRadians</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetIsXbox">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetIsXbox</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetIsXbox</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetJoystickType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetJoystickType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetJoystickType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetMagnitude">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetMagnitude</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetMagnitude</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetName">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetName</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetName</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetPOV(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetPOV(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="pov">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>pov</parameter>
            <parameter>M:WPILib.Joystick.GetPOV(System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetPOV(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetRawAxis(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetRawAxis(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="axis">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axis</parameter>
            <parameter>M:WPILib.Joystick.GetRawAxis(System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetRawAxis(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetRawButton(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetRawButton(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="button">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>button</parameter>
            <parameter>M:WPILib.Joystick.GetRawButton(System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetRawButton(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetThrottle">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetThrottle</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetThrottle</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetTop(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetTop(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetTop(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetTop(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetTrigger(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetTrigger(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetTrigger(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetTrigger(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetTwist">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetTwist</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetTwist</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetX(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetX(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetX(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetX(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetY(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetY(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetY(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetY(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Joystick.GetZ(WPILib.Hand)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.GetZ(WPILib.Hand)</parameter>
          </include>
        </markup>
      </summary>
      <param name="hand">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>hand</parameter>
            <parameter>M:WPILib.Joystick.GetZ(WPILib.Hand)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Joystick.GetZ(WPILib.Hand)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Joystick.POVCount">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Joystick.POVCount</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Joystick.SetAxisChannel(WPILib.Joystick.AxisType,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.SetAxisChannel(WPILib.Joystick.AxisType,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="axis">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>axis</parameter>
            <parameter>M:WPILib.Joystick.SetAxisChannel(WPILib.Joystick.AxisType,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Joystick.SetAxisChannel(WPILib.Joystick.AxisType,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Joystick.SetOutput(System.Int32,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.SetOutput(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="outputNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>outputNumber</parameter>
            <parameter>M:WPILib.Joystick.SetOutput(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Joystick.SetOutput(System.Int32,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Joystick.SetOutputs(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.SetOutputs(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Joystick.SetOutputs(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Joystick.SetRumble(WPILib.Joystick.RumbleType,System.Single)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Joystick.SetRumble(WPILib.Joystick.RumbleType,System.Single)</parameter>
          </include>
        </markup>
      </summary>
      <param name="type">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>type</parameter>
            <parameter>M:WPILib.Joystick.SetRumble(WPILib.Joystick.RumbleType,System.Single)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Joystick.SetRumble(WPILib.Joystick.RumbleType,System.Single)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Joystick.AxisType">
      <summary>
            Axes enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.AxisType.X"></member>
    <member name="F:WPILib.Joystick.AxisType.Y"></member>
    <member name="F:WPILib.Joystick.AxisType.Z"></member>
    <member name="F:WPILib.Joystick.AxisType.Twist"></member>
    <member name="F:WPILib.Joystick.AxisType.Throttle"></member>
    <member name="F:WPILib.Joystick.AxisType.NumAxis"></member>
    <member name="T:WPILib.Joystick.ButtonType">
      <summary>
            Button enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.ButtonType.Trigger"></member>
    <member name="F:WPILib.Joystick.ButtonType.Top"></member>
    <member name="F:WPILib.Joystick.ButtonType.NumButton"></member>
    <member name="T:WPILib.Joystick.RumbleType">
      <summary>
            Rumble Type enum for Joysticks
            </summary>
    </member>
    <member name="F:WPILib.Joystick.RumbleType.LeftRumble"></member>
    <member name="F:WPILib.Joystick.RumbleType.RightRumble"></member>
    <member name="T:WPILib.MotorSafetyHelper">
      <summary>
            The <see cref="T:WPILib.MotorSafetyHelper" /> object is constructed for every object that wants to implement the Motor
            Safety protocol. </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.#ctor(WPILib.Interfaces.IMotorSafety)">
      <summary>
            The constructor for a <see cref="T:WPILib.MotorSafetyHelper" /> object
            </summary>
      <param name="safeObject">A pointer to the motor object implementing <see cref="T:WPILib.Interfaces.IMotorSafety" />. This is used
            to call the Stop() method on the motor</param>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.Alive">
      <summary>
            Determine if the motor is still operating or has timed out.
            </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.Check">
      <summary>
            Check if this motor has exceeded its timeout. </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.CheckMotors">
      <summary>
            Check the motors to see if any have timed out. </summary>
    </member>
    <member name="F:WPILib.MotorSafetyHelper.DefaultSafetyExpiration">
      <summary>
            The default safety expiration time.
            </summary>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.Expiration">
      <summary>
            Set the expiration time for the corresponding motor safety object.
            </summary>
    </member>
    <member name="M:WPILib.MotorSafetyHelper.Feed">
      <summary>
            Feed the motor safety object. </summary>
    </member>
    <member name="P:WPILib.MotorSafetyHelper.SafetyEnabled">
      <summary>
            Enable/disable motor safety for this device. </summary>
    </member>
    <member name="T:WPILib.MotorType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:WPILib.MotorType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.MotorType.FrontLeft"></member>
    <member name="F:WPILib.MotorType.FrontRight"></member>
    <member name="F:WPILib.MotorType.RearLeft"></member>
    <member name="F:WPILib.MotorType.RearRight"></member>
    <member name="T:WPILib.Notifier">
      <summary>
            The Notifier class is used to create alarms from the FPGA.
            </summary>
    </member>
    <member name="M:WPILib.Notifier.#ctor(System.Action)">
      <summary>
            Create a notifier for the timer event notification.
            </summary>
      <param name="handler">The callback that is called at the notification time
            which is set using <see cref="M:WPILib.Notifier.StartSingle(System.Double)" /> or <see cref="M:WPILib.Notifier.StartPeriodic(System.Double)" /></param>
    </member>
    <member name="M:WPILib.Notifier.#ctor(System.Action{System.Object},System.Object)">
      <summary>
            Create a notifier for the timer event notification.
            </summary>
      <param name="handler">The callback that is called at the notification time
            which is set using <see cref="M:WPILib.Notifier.StartSingle(System.Double)" /> or <see cref="M:WPILib.Notifier.StartPeriodic(System.Double)" /></param>
      <param name="param">The object to pass to the callback.</param>
    </member>
    <member name="M:WPILib.Notifier.Dispose">
      <summary>
            Disposes of the Notifier
            </summary>
    </member>
    <member name="M:WPILib.Notifier.InsertInQueue(System.Boolean)">
      <summary>
            Insert this Notifier into the timer queue in the right place.
            </summary>
      <param name="reschedule">If false, the scheduled alarm is based on the current
            time and UpdateAlarm method is called which will enable the alarm if
            necessary.If true, update the time by adding the period(no drift) when
            rescheduled periodic from ProcessQueue.This ensures that the public
            methods only update the queue after finishing inserting.</param>
    </member>
    <member name="M:WPILib.Notifier.StartPeriodic(System.Double)">
      <summary>
            Register for periodic event notification..
            </summary>
      <param name="period">Period in seconds to call the handler starting one
            period after  the call to this method.</param>
    </member>
    <member name="M:WPILib.Notifier.StartSingle(System.Double)">
      <summary>
            Register for a single event notification
            </summary>
      <param name="delay">Seconds to wait before the handler is called.</param>
    </member>
    <member name="M:WPILib.Notifier.Stop">
      <summary>
            Stop timer events from occurring.
            </summary>
    </member>
    <member name="M:WPILib.Notifier.UpdateAlarm">
      <summary>
            Update the alarm hardware to reflect the current first element in the queue
            </summary>
    </member>
    <member name="T:WPILib.Parity">
      <summary>
            Specifies the parity bit for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.Parity.None"></member>
    <member name="F:WPILib.Parity.Odd"></member>
    <member name="F:WPILib.Parity.Even"></member>
    <member name="F:WPILib.Parity.Mark"></member>
    <member name="F:WPILib.Parity.Space"></member>
    <member name="T:WPILib.PeriodMultiplier">
      <summary>
            Represents the amount to multiply the minimum servo-pulse pwm period by.
            </summary>
    </member>
    <member name="F:WPILib.PeriodMultiplier.K1X"></member>
    <member name="F:WPILib.PeriodMultiplier.K2X"></member>
    <member name="F:WPILib.PeriodMultiplier.K4X"></member>
    <member name="T:WPILib.PIDController">
      <summary>
            Implements a PID loop to be used with mechanisms.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PIDController</parameter>
          </include>
        </markup>
      </summary>
      <param name="Kp">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kp</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="Ki">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Ki</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kd</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kf">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kf</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PIDController</parameter>
          </include>
        </markup>
      </summary>
      <param name="Kp">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kp</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="Ki">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Ki</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kd</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kf">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kf</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PIDController</parameter>
          </include>
        </markup>
      </summary>
      <param name="Kp">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kp</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="Ki">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Ki</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kd</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PIDController</parameter>
          </include>
        </markup>
      </summary>
      <param name="Kp">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kp</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="Ki">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Ki</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="Kd">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>Kd</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.PIDController.#ctor(System.Double,System.Double,System.Double,WPILib.Interfaces.IPIDSource,WPILib.Interfaces.IPIDOutput,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.Calculate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.Calculate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.CallCalculate(System.Object)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.CallCalculate(System.Object)</parameter>
          </include>
        </markup>
      </summary>
      <param name="o">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>o</parameter>
            <parameter>M:WPILib.PIDController.CallCalculate(System.Object)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.PIDController.Continouous">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.Continouous</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.PIDController.D">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.D</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.PIDController.DefaultPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.PIDController.DefaultPeriod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.Disable">
      <summary>
            Stops the control loop from running until explicitly re-enabled by calling
            <see cref="M:WPILib.Interfaces.IController.Enable" /></summary>
    </member>
    <member name="M:WPILib.PIDController.Dispose">
      <summary>
        <markup>
          <include item="SMCAutoDocDispose">
            <parameter>WPILib.PIDController</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="P:WPILib.PIDController.Enabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.Enabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.PIDController.F">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.F</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PIDController.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PIDController.GetError">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.GetError</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PIDController.GetError</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.PIDController.I">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.I</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.PIDController.OnTarget">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.OnTarget</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.PIDController.P">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.P</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.SetAbsoluteTolerance(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetAbsoluteTolerance(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="absTolerance">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>absTolerance</parameter>
            <parameter>M:WPILib.PIDController.SetAbsoluteTolerance(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.SetInputRange(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="minimumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumInput</parameter>
            <parameter>M:WPILib.PIDController.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="maximumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maximumInput</parameter>
            <parameter>M:WPILib.PIDController.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.SetOutputRange(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="minimumOutput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumOutput</parameter>
            <parameter>M:WPILib.PIDController.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="maximumOutput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maximumOutput</parameter>
            <parameter>M:WPILib.PIDController.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.SetPercentTolerance(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetPercentTolerance(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="percent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>percent</parameter>
            <parameter>M:WPILib.PIDController.SetPercentTolerance(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.PIDController.SetPID(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.PIDController.Setpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.PIDController.Setpoint</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PIDController.SetTolerance(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.SetTolerance(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="percent">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>percent</parameter>
            <parameter>M:WPILib.PIDController.SetTolerance(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.PIDController.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PIDController.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PIDController.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PIDController.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.PIDController.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.PIDController.ToleranceType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>T:WPILib.PIDController.ToleranceType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.PIDController.ToleranceType.AbsoluteTolerance"></member>
    <member name="F:WPILib.PIDController.ToleranceType.PercentTolerance"></member>
    <member name="F:WPILib.PIDController.ToleranceType.NoTolerance"></member>
    <member name="T:WPILib.Port">
      <summary>
            Specifies the serial port to use on the RoboRIO.
            </summary>
    </member>
    <member name="F:WPILib.Port.Onboard"></member>
    <member name="F:WPILib.Port.MXP"></member>
    <member name="F:WPILib.Port.USB"></member>
    <member name="T:WPILib.PowerDistributionPanel">
      <summary>
            Class for getting voltage, current, temperature, and energy from the CAN PDP.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PowerDistributionPanel</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.#ctor(System.Int32)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.PowerDistributionPanel</parameter>
          </include>
        </markup>
      </summary>
      <param name="module">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>module</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.ClearStickyFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.ClearStickyFaults</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetCurrent(System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetCurrent(System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetCurrent(System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetCurrent(System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTemperature">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTemperature</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTemperature</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalCurrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalCurrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalCurrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalEnergy">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalEnergy</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalEnergy</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetTotalPower">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalPower</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetTotalPower</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.GetVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.GetVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.ResetEnergyTotal">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PowerDistributionPanel.ResetEnergyTotal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.PowerDistributionPanel.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PowerDistributionPanel.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PowerDistributionPanel.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.Preferences">
      <summary>
            Provides a relatively simple way to save important values to the RoboRIO to access the next
            time the RoboRIO is booted.
            </summary>
    </member>
    <member name="M:WPILib.Preferences.ContainsKey(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.ContainsKey(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.ContainsKey(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.ContainsKey(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetDouble(System.String,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetFloat(System.String,System.Single)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetInt(System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetLong(System.String,System.Int64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Preferences.GetString(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="backup">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>backup</parameter>
            <parameter>M:WPILib.Preferences.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Preferences.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Preferences.Instance">
      <summary>
            Returns the preferences instance.
            </summary>
    </member>
    <member name="P:WPILib.Preferences.Keys">
      <summary>
            Gets a list of the Keys
            </summary>
    </member>
    <member name="M:WPILib.Preferences.PutBoolean(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.PutDouble(System.String,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.PutDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.PutDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.PutDouble(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.PutFloat(System.String,System.Single)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.PutFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.PutFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.PutFloat(System.String,System.Single)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.PutInt(System.String,System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.PutInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.PutInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.PutInt(System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.PutLong(System.String,System.Int64)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.PutLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.PutLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.PutLong(System.String,System.Int64)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.PutString(System.String,System.String)">
      <summary>
            Puts the given string into the preferences table.
            </summary>
      <param name="key">The key to write to</param>
      <param name="value">The value to set</param>
      <exception cref="T:System.ArgumentNullException">If the value is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value contains a quotation mark</exception>
      <exception cref="T:WPILib.Preferences.ImproperPreferenceKeyException">If the key contains any white space of an equals sign</exception>
    </member>
    <member name="M:WPILib.Preferences.Read">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.Read</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Preferences.Remove(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.Remove(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.Remove(System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Preferences.Save">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.Save</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.Preferences.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.PWM">
      <summary>
            Class implements the PWM generation in the FPGA.
            </summary>
    </member>
    <member name="M:WPILib.PWM.#ctor(System.Int32)">
      <summary>
            Allocate a PWM given a channel
            </summary>
      <param name="channel">The PWM Channel.</param>
    </member>
    <member name="P:WPILib.PWM.CenterPwm">
      <summary>
            Gets the Center PWM value.
            </summary>
    </member>
    <member name="P:WPILib.PWM.Channel">
      <summary>
            Gets the channel number associated with the PWM Object.
            </summary>
    </member>
    <member name="P:WPILib.PWM.DeadbandElimination">
      <summary>
            Get or set whether or not to eliminate deadband from the speed contruller.
            </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmCenter">
      <summary>
            DefaultPWMCenter is the PWM range center in ms
            </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmPeriod">
      <summary>
             DefaultPWMPeriod is in milliseconds.
             </summary>
    </member>
    <member name="F:WPILib.PWM.DefaultPwmStepsDown">
      <summary>
            DefaultPWMStepsDown is the number of PWM steps below the centerpoint
            </summary>
    </member>
    <member name="M:WPILib.PWM.Dispose">
      <summary>
            Free the PWM Channel
            </summary>
    </member>
    <member name="P:WPILib.PWM.FullRangeScaleFactor">
      <summary>
            Gets the scale factor for all values
            </summary>
    </member>
    <member name="M:WPILib.PWM.GetPosition">
      <summary>
            Get the PWM value in terms of a position
            </summary>
      <returns>The position the server is set to between 0.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.PWM.GetRaw">
      <summary>
            Gets the latest PWM value directly from the FPGA.
            </summary>
      <returns>Raw PWM value between 0 and 2000</returns>
    </member>
    <member name="M:WPILib.PWM.GetSpeed">
      <summary>
            Gets the latest PWM value in terms of speed
            </summary>
      <returns>The most recently set speed between -1.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.PWM.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.PWM.MaxNegativePwm">
      <summary>
            Gets the Max Negative PWM allowed. This is the low end of the deadband.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MaxPositivePwm">
      <summary>
            Get the Max Positive PWM allowed.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MinNegativePwm">
      <summary>
            Gets the Min Negative PWM allowed.
            </summary>
    </member>
    <member name="P:WPILib.PWM.MinPositivePwm">
      <summary>
            Gets the Min Positive PWM allowed. This is the high end of the deadzone.
            </summary>
    </member>
    <member name="P:WPILib.PWM.NegativeScaleFactor">
      <summary>
            Gets the scale factor for negative values
            </summary>
    </member>
    <member name="P:WPILib.PWM.PeriodMultiplier">
      <summary>
            Sets the Period Multiplier. This is used to slow down the signal for
            old PWM devices.
            </summary>
    </member>
    <member name="P:WPILib.PWM.PositiveScaleFactor">
      <summary>
            Gets the scale factor for positive values
            </summary>
    </member>
    <member name="F:WPILib.PWM.PwmDisabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.PWM.PwmDisabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.PWM.SetBounds(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Set the bounds on the PWM pulse widths.
            </summary>
      <param name="max">The minimum PWM value</param>
      <param name="deadbandMax">The high end of the deadband range</param>
      <param name="center">The center speed (off)</param>
      <param name="deadbandMin">The low end of the deadband range</param>
      <param name="min">The minimum PWM value</param>
    </member>
    <member name="M:WPILib.PWM.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Set the bounds on the PWM values.
            </summary>
      <param name="max">The minimum PWM value</param>
      <param name="deadbandMax">The high end of the deadband range</param>
      <param name="center">The center speed (off)</param>
      <param name="deadbandMin">The low end of the deadband range</param>
      <param name="min">The minimum PWM value</param>
    </member>
    <member name="M:WPILib.PWM.SetPosition(System.Double)">
      <summary>
            Set the PWM value based on a position
            </summary>
      <param name="pos">The position to set the servo between 0.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWM.SetRaw(System.Int32)">
      <summary>
            Sets the PWM value directly to the FPGA.
            </summary>
      <param name="value">Raw PWM value between 0 and 2000</param>
    </member>
    <member name="M:WPILib.PWM.SetSpeed(System.Double)">
      <summary>
            Set the PWM value based on speed
            </summary>
      <param name="value">The speed to set the speed controller between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWM.SetZeroLatch">
      <summary>
            Latch Zero on the PWM Port.
            </summary>
    </member>
    <member name="P:WPILib.PWM.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.PWM.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.PWM.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.PWM.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.PWM.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="table">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>table</parameter>
            <parameter>M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bin">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bin</parameter>
            <parameter>M:WPILib.PWM.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.PWMSpeedController">
      <summary>
            This is the base class for all PWM Speed Controllers.
            </summary>
    </member>
    <member name="M:WPILib.PWMSpeedController.#ctor(System.Int32)">
      <summary>
            Constructor for a PWM Speed Controller.
            </summary>
      <param name="channel">The PWM Channel that the Speed Controller is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="P:WPILib.PWMSpeedController.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="M:WPILib.PWMSpeedController.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.PWMSpeedController.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="T:WPILib.Relay">
      <summary>
            The Relay class is used to interface with the Relay ports on the RoboRIO. 
            These are usually used with Spike Relays.
            </summary>
    </member>
    <member name="M:WPILib.Relay.#ctor(System.Int32)">
      <summary>
            Creates a new relay, allowing both directions.
            </summary>
      <param name="channel">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>channel</parameter>
            <parameter>M:WPILib.Relay.#ctor(System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Relay.#ctor(System.Int32,WPILib.Relay.Direction)">
      <summary>
            Creates a new relay, specifying the directions allowed.
            </summary>
      <param name="channel">The relay channel</param>
      <param name="direction">The directions allowed.</param>
    </member>
    <member name="M:WPILib.Relay.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.Relay.Get">
      <summary>
            Gets the latest relay value sent.
            </summary>
      <returns>The latest relay value.</returns>
    </member>
    <member name="M:WPILib.Relay.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Relay.Set(WPILib.Relay.Value)">
      <summary>
            Sets the relay output.
            </summary>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:WPILib.Relay.SetDirection(WPILib.Relay.Direction)">
      <summary>
            Sets the direction allowed by the relay.
            </summary>
      <param name="direction">The directions to allow.</param>
    </member>
    <member name="P:WPILib.Relay.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Relay.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Relay.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Relay.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Relay.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.Relay.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Relay.Direction">
      <summary>
            The directions the relay is allowed to output.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Direction.Both"></member>
    <member name="F:WPILib.Relay.Direction.Forward"></member>
    <member name="F:WPILib.Relay.Direction.Reverse"></member>
    <member name="T:WPILib.Relay.Value">
      <summary>
            The value to set the relay to.
            </summary>
    </member>
    <member name="F:WPILib.Relay.Value.Off"></member>
    <member name="F:WPILib.Relay.Value.On"></member>
    <member name="F:WPILib.Relay.Value.Forward"></member>
    <member name="F:WPILib.Relay.Value.Reverse"></member>
    <member name="T:WPILib.Resource">
      <summary>
            Track resources in the program.
            </summary>
    </member>
    <member name="M:WPILib.Resource.#ctor(System.Int32)">
      <summary>
            Allocate storage for a new instance of <see cref="T:WPILib.Resource" /></summary>
      <param name="size">The number of blocks to allocate.</param>
    </member>
    <member name="M:WPILib.Resource.Allocate(System.Int32,System.String)">
      <summary>
            Allocate a specific resource value.
            </summary>
      <param name="index">The resource to allocate.</param>
      <param name="error">The string to throw when there is an error.</param>
      <returns>The index of the allocated block.</returns>
      <exception cref="T:WPILib.Exceptions.AllocationException"> If there are no resources
            available to be allocated.</exception>
    </member>
    <member name="M:WPILib.Resource.Allocate(System.String)">
      <summary>
            Allocate a resource.
            </summary>
      <param name="error">The string to throw when there is an error.</param>
      <returns>The index of the allocated block.</returns>
      <exception cref="T:WPILib.Exceptions.AllocationException"> If there are no resources
            available to be allocated.</exception>
    </member>
    <member name="M:WPILib.Resource.Deallocate(System.Int32)">
      <summary>
            Dispose of an allocated resource.
            </summary>
      <param name="index">The index of the resource to free</param>
    </member>
    <member name="M:WPILib.Resource.RestartProgram">
      <summary>
            Clears all allocated resources.
            </summary>
    </member>
    <member name="T:WPILib.RobotBase">
      <summary>
            This is the base for all FRC Robots.
            </summary>
    </member>
    <member name="M:WPILib.RobotBase.#ctor">
      <summary>
            Creates a new RobotBase. When this is called, it initializes NetworkTables and the
            <see cref="T:WPILib.DriverStation" /></summary>
    </member>
    <member name="M:WPILib.RobotBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.RobotBase.InitializeHardwareConfiguration">
      <summary>
            Common initialization for all robot programs.
            </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsAutonomous">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsAutonomous</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsDisabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsDisabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsEnabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsEnabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsNewDataAvailable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsNewDataAvailable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsOperatorControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsOperatorControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsReal">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsReal</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsSimulation">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsSimulation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotBase.IsTest">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotBase.IsTest</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotBase.m_ds">
      <summary>
            This holds the <see cref="T:WPILib.DriverStation" /> object for this robot.
            </summary>
    </member>
    <member name="M:WPILib.RobotBase.Main(System.Reflection.Assembly,System.Type)">
      <summary>
            Starting point for robot applications. You can provide either an assembly, or a type. 
            If passed a type, it takes priority.
            </summary>
      <param name="robotAssembly">The assembly the main robot class is located in.</param>
      <param name="robotType">The main robot class type</param>
    </member>
    <member name="M:WPILib.RobotBase.Prestart">
      <summary>
            This function is called right before <see cref="M:WPILib.RobotBase.StartCompetition" /></summary>
    </member>
    <member name="M:WPILib.RobotBase.StartCompetition">
      <summary>
            This function is called by the initializer to start the main loop.
            </summary>
    </member>
    <member name="T:WPILib.RobotDrive">
      <summary>
            Utility class for handling robot drive based on a defined motor configuration.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor for RobotDrive with 2 motors specified with channel numbers.
            </summary>
      <param name="leftMotorChannel">The PWM channel number that drives the left motor</param>
      <param name="rightMotorChannel">The PWM channel number that drives the right motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Constructor for RobotDrive with 4 motors specified with channel numbers.
            </summary>
      <param name="frontLeftMotor">The PWM Channel that drives the Front Left Motor</param>
      <param name="rearLeftMotor">The PWM Channel that drives the Rear Left Motor</param>
      <param name="frontRightMotor">The PWM Channel that drives the Front Right Motor</param>
      <param name="rearRightMotor">The PWM Channel that drives the Rear Right Motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController)">
      <summary>
            Constructor for RobotDrive with 2 motors specified as <see cref="T:WPILib.Interfaces.ISpeedController" /> objects.
            </summary>
      <param name="leftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Left Motor</param>
      <param name="rightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Right Motor</param>
    </member>
    <member name="M:WPILib.RobotDrive.#ctor(WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController,WPILib.Interfaces.ISpeedController)">
      <summary>
            Constructor for RobotDrive with 4 motors specified as <see cref="T:WPILib.Interfaces.ISpeedController" /> objects.
            </summary>
      <param name="frontLeftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Front Left Motor</param>
      <param name="rearLeftMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Rear Left Motor</param>
      <param name="frontRightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Front Right Motor</param>
      <param name="rearRightMotor">The <see cref="T:WPILib.Interfaces.ISpeedController" /> controlling the Rear Right Motor</param>
    </member>
    <member name="P:WPILib.RobotDrive.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(System.Double,System.Double,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="moveValue">The value to use for forward/backwards</param>
      <param name="rotateValue">The value to use to rotate left/right</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(WPILib.GenericHID,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="stick">The joystick to use for drving. Y-axis will be forward/backwards, and X-axis
            will be rotation.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.ArcadeDrive(WPILib.GenericHID,System.Int32,WPILib.GenericHID,System.Int32,System.Boolean)">
      <summary>
            Provides arcade style driving for the robot.
            </summary>
      <param name="moveStick">The Joystick object that represents the forward/backward direction</param>
      <param name="moveAxis">The axis on the moveStick to use.</param>
      <param name="rotateStick">The Joystick object that represents the rotation value</param>
      <param name="rotateAxis">The axis on the rotationStick to use.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="P:WPILib.RobotDrive.CANJaguarSyncGroup">
      <summary>
            Sets the sync group for the motor controllers if they are <see cref="T:WPILib.CANJaguar">CANJaguars</see></summary>
    </member>
    <member name="F:WPILib.RobotDrive.DefaultExpirationTime">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.DefaultExpirationTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.DefaultMaxOutput">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.DefaultMaxOutput</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.DefaultSensitivity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.DefaultSensitivity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotDrive.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.RobotDrive.Drive(System.Double,System.Double)">
      <summary>
            Drive the motors at a specified "speed" and "curve".
            </summary>
      <param name="outputMagnitude">The forward component of the magnitude to send to the motors.</param>
      <param name="curve">The rate of turn, constant for different forward speeds.c</param>
    </member>
    <member name="P:WPILib.RobotDrive.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.Limit(System.Double)">
      <summary>
            Limit motor values to the -1.0 to +1.0 ranges
            </summary>
      <param name="num">The number to limit</param>
      <returns>The limited value</returns>
    </member>
    <member name="F:WPILib.RobotDrive.m_allocatedSpeedControllers">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_allocatedSpeedControllers</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_frontLeftMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_frontLeftMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_frontRightMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_frontRightMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_maxOutput">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_maxOutput</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_rearLeftMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_rearLeftMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_rearRightMotor">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_rearRightMotor</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_safetyHelper">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_safetyHelper</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_sensitivity">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_sensitivity</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.m_syncGroup">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.m_syncGroup</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotDrive.MaxOutput">
      <summary>
            Sets the maximum output allowed to be outputed by the drive.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.MecanumDrive_Cartesian(System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Cartesian drive method for Mecanum wheeled robots
            </summary>
      <param name="x">The speed that the robot should drive in the X direction.</param>
      <param name="y">The speed that the robbot should drive in the Y direction.</param>
      <param name="rotation">The rate of rotation for the robot that is independed of translation.</param>
      <param name="gyroAngle">The current angle reading from the gyro. Use this to implement field-oriented controls.</param>
    </member>
    <member name="M:WPILib.RobotDrive.mecanumDrive_Polar(System.Double,System.Double,System.Double)">
      <summary>
            Polar drive method for Mecanum wheeled robots.
            </summary>
      <param name="magnitude">The magnitude vector</param>
      <param name="direction">The direction vector to drive in.</param>
      <param name="rotation">The rate of rotation. This is independant from translation.</param>
    </member>
    <member name="M:WPILib.RobotDrive.Normalize(System.Collections.Generic.IList{System.Double})">
      <summary>
            Normalized all wheel speeds if the magnitude of any wheel is greater the 1.0.
            </summary>
      <param name="wheelSpeeds">The wheel speeds to normalize</param>
    </member>
    <member name="P:WPILib.RobotDrive.NumMotors">
      <summary>
            Gets the number of motors in the drive.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.RotateVector(System.Double@,System.Double@,System.Double)">
      <summary>
            Rotates a vector in Cartesian Space
            </summary>
      <param name="x">The X vector</param>
      <param name="y">The Y vector</param>
      <param name="angle">The angle to rotate in degrees</param>
    </member>
    <member name="F:WPILib.RobotDrive.s_arcadeRatioCurveReported">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_arcadeRatioCurveReported</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.s_arcadeStandardReported">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_arcadeStandardReported</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.s_maxNumberOfMotors">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_maxNumberOfMotors</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.s_mecanumCartesianReported">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_mecanumCartesianReported</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.s_mecanumPolarReported">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_mecanumPolarReported</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.RobotDrive.s_tankReported">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.RobotDrive.s_tankReported</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotDrive.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="P:WPILib.RobotDrive.Sensitivity">
      <summary>
            Sets the turning sensitivity for the <see cref="M:WPILib.RobotDrive.Drive(System.Double,System.Double)" /> function.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.SetInvertedMotor(WPILib.MotorType,System.Boolean)">
      <summary>
            Invert a motor direction
            </summary>
      <param name="motor">The motor index to invert</param>
      <param name="isInverted">True if the motor should be inverted.</param>
    </member>
    <member name="M:WPILib.RobotDrive.SetLeftRightMotorOutputs(System.Double,System.Double)">
      <summary>
            Sets the speed of the left and right drive motors
            </summary>
      <param name="leftOutput">The speed to send to the left side.</param>
      <param name="rightOutput">The speed to send to the right side.</param>
    </member>
    <member name="M:WPILib.RobotDrive.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="M:WPILib.RobotDrive.TankDrive(System.Double,System.Double,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftValue">The value for the left side</param>
      <param name="rightValue">The value for the right side</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.TankDrive(WPILib.GenericHID,System.Int32,WPILib.GenericHID,System.Int32,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftStick">The joystick to use for the left side.</param>
      <param name="leftAxis">The axis to select on the left joystick.</param>
      <param name="rightStick">The joystick to use for the right side.</param>
      <param name="rightAxis">The axis to select on the right joystick</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="M:WPILib.RobotDrive.TankDrive(WPILib.GenericHID,WPILib.GenericHID,System.Boolean)">
      <summary>
            Provide tank style driving for the robot.
            </summary>
      <param name="leftStick">The joystick to control the left side of the robot.</param>
      <param name="rightStick">The joystick to control the right side of the robot.</param>
      <param name="squaredInputs">If this setting is true, it decreases the sensitvity at lower speeds.</param>
    </member>
    <member name="T:WPILib.RobotState">
      <summary>
            High level robot state reporting.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Autonomous">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Autonomous</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Disabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Disabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Enabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Enabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Implementation">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Implementation</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.OperatorControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.OperatorControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Test">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Test</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.RobotState.Interface">
      <summary>
            Interface for robot state reporters.
            </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Autonomous">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Interface.Autonomous</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Disabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Interface.Disabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Enabled">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Interface.Enabled</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.OperatorControl">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Interface.OperatorControl</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.RobotState.Interface.Test">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.RobotState.Interface.Test</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.SafePWM">
      <summary>
            This class is used to create PWM devices that implement <see cref="T:WPILib.Interfaces.IMotorSafety" />.
            This will cause a watchdog to be created for the object, and if it is
            not updated within a certain period, it will be stopped.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.#ctor(System.Int32)">
      <summary>
            Creates a new SafePWM object.
            </summary>
      <param name="channel">The PWM Channel that the Object is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="P:WPILib.SafePWM.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.Disable">
      <summary>
            Disables the PWM output.
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.Feed">
      <summary>
            Feeds the Motor Safety Timer
            </summary>
    </member>
    <member name="P:WPILib.SafePWM.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.SafePWM.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="T:WPILib.SampleRobot">
      <summary>
            A simple robot base class that knows the standard competition states. 
            (disabled, autonomous, or operator controlled)
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.#ctor">
      <summary>
            Creates a new SampleRobot
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Autonomous">
      <summary>
            Autonomous should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Disabled">
      <summary>
            Disabled should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.OperatorControl">
      <summary>
            Operator control (tele-operated) code should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.RobotInit">
      <summary>
            Robot-wide initialization should go here.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.RobotMain">
      <summary>
            Robot main program for free-form programs.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.StartCompetition">
      <summary>
            Start a competition.
            </summary>
    </member>
    <member name="M:WPILib.SampleRobot.Test">
      <summary>
            Test code should go here.
            </summary>
    </member>
    <member name="T:WPILib.SensorBase">
      <summary>
            This class is the base for all sensors.
            </summary>
    </member>
    <member name="M:WPILib.SensorBase.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.SensorBase</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.AnalogInputChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.AnalogInputChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.AnalogOutputChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.AnalogOutputChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.SensorBase.CheckAnalogInputChannel(System.Int32)">
      <summary>
            Check that the analog channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckAnalogOutputChannel(System.Int32)">
      <summary>
            Check that the analog output channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckDigitalChannel(System.Int32)">
      <summary>
            Check that the digital channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPDPChannel(System.Int32)">
      <summary>
            Check that the power distribution channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPDPModule(System.Int32)">
      <summary>
            Check that the PDP CAN ID is in valid.
            </summary>
      <param name="module">The CAN ID to check</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckPwmChannel(System.Int32)">
      <summary>
            Check that the PWM channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckRelayChannel(System.Int32)">
      <summary>
            Check that the relay channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckSolenoidChannel(System.Int32)">
      <summary>
            Check that the solenoid channel number is valid.
            </summary>
      <param name="channel">The channel number to check.</param>
    </member>
    <member name="M:WPILib.SensorBase.CheckSolenoidModule(System.Int32)">
      <summary>
            Verify that the solenoid module is correct
            </summary>
      <param name="moduleNumber">The module number to check.</param>
    </member>
    <member name="P:WPILib.SensorBase.DefaultSolenoidModule">
      <summary>
            Gets or Sets the default solenoid module number;
            </summary>
    </member>
    <member name="F:WPILib.SensorBase.DigitalChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.DigitalChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.SensorBase.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="F:WPILib.SensorBase.PDPChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.PDPChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.PDPModules">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.PDPModules</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.PwmChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.PwmChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.RelayChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.RelayChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.SolenoidChannels">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.SolenoidChannels</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.SolenoidModules">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.SolenoidModules</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.SensorBase.SystemClockTicksPerMicrosecond">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.SensorBase.SystemClockTicksPerMicrosecond</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.SerialPort">
      <summary>
            Driver for the serial ports onboard the RoboRIO.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.#ctor(System.Int32,WPILib.Port,System.Int32,WPILib.Parity,WPILib.StopBits)">
      <summary>
            Creates an instance of the Serial Port class.
            </summary>
      <param name="baudRate">The baud rate to configure the serial port at.</param>
      <param name="port">The serial port to use.</param>
      <param name="dataBits">The number of data bits per transfer, between 5 and 8</param>
      <param name="parity">The type of parity checking to use</param>
      <param name="stopBits">The number of stop bits to use</param>
    </member>
    <member name="P:WPILib.SerialPort.BytesReceived">
      <summary>
            Gets the number of bytes current available to read from the serial port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.DisableTermination">
      <summary>
            Disables termination
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.SerialPort.EnableTermination">
      <summary>
            Enables termination with the default terminator '\n'.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.EnableTermination(System.Char)">
      <summary>
            Enables termination with the specified terminator
            </summary>
      <param name="terminator">The character to use for termination.</param>
    </member>
    <member name="P:WPILib.SerialPort.FlowControl">
      <summary>
            Sets the type of flow control to enable on this port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Flush">
      <summary>
            Force the output buffer to be written to the port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Read(System.Int32)">
      <summary>
            Read raw bytes out of the buffer.
            </summary>
      <param name="count">The maximum number of bytes to read.</param>
      <returns>An array of the read bytes</returns>
    </member>
    <member name="P:WPILib.SerialPort.ReadBufferSize">
      <summary>
            Sets the size of the input buffer.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.ReadString">
      <summary>
            Reads a string out of the buffer, reading the full buffer.
            </summary>
      <returns>The read string</returns>
    </member>
    <member name="M:WPILib.SerialPort.ReadString(System.Int32)">
      <summary>
            Reads a string out of the buffer.
            </summary>
      <param name="count">The number of characters to read into the string</param>
      <returns>The read string</returns>
    </member>
    <member name="M:WPILib.SerialPort.Reset">
      <summary>
            Reset the serial port driver to a know state.
            </summary>
    </member>
    <member name="P:WPILib.SerialPort.Timeout">
      <summary>
            Configures the timeout of the serial port.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.Write(System.Byte[],System.Int32)">
      <summary>
            Write raw bytes to the serial port.
            </summary>
      <param name="buffer">The buffer of bytes to write.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <returns>The number of bytes actually written to the port.</returns>
    </member>
    <member name="P:WPILib.SerialPort.WriteBufferMode">
      <summary>
            Sets the flushing behavior of the output buffer
            </summary>
    </member>
    <member name="P:WPILib.SerialPort.WriteBufferSize">
      <summary>
            Sets the size of the output buffer.
            </summary>
    </member>
    <member name="M:WPILib.SerialPort.WriteString(System.String)">
      <summary>
            Writes a string to the serial port
            </summary>
      <param name="data">The string to write to the serial port.</param>
      <returns>The number of bytes written  to the port.</returns>
    </member>
    <member name="T:WPILib.Servo">
      <summary>
            This class is used for interfacing with 
            </summary>
    </member>
    <member name="M:WPILib.Servo.#ctor(System.Int32)">
      <summary>
            Creates a new Servo.
            </summary>
      <param name="channel">The PWM Channel that the Servo is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="F:WPILib.Servo.DefaultMaxServoPWM">
      <summary>
            The default max value for the servo.
            </summary>
    </member>
    <member name="F:WPILib.Servo.DefaultMinServoPWM">
      <summary>
            The default min value for the servo.
            </summary>
    </member>
    <member name="M:WPILib.Servo.Get">
      <summary>
            Gets the latest absolute value of the servo.
            </summary>
      <returns>The latest absolute setpoint between 0.0 and 1.0</returns>
    </member>
    <member name="M:WPILib.Servo.GetAngle">
      <summary>
            Gets the latest servo angle.
            </summary>
      <returns>The latest angle in degrees between 0 and 180</returns>
    </member>
    <member name="M:WPILib.Servo.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Servo.Set(System.Double)">
      <summary>
            Sets the absolute value of the servo.
            </summary>
      <param name="value">The absolute setpoint between 0.0 and 1.0</param>
    </member>
    <member name="M:WPILib.Servo.SetAngle(System.Double)">
      <summary>
            Sets the servo angle.
            </summary>
      <param name="degrees">The angle in degrees between 0 and 180</param>
    </member>
    <member name="P:WPILib.Servo.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Servo.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Servo.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.Servo.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="table">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>table</parameter>
            <parameter>M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="bin">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>bin</parameter>
            <parameter>M:WPILib.Servo.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Solenoid">
      <summary>
            Solenoid class for running high voltage digital output.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.#ctor(System.Int32)">
      <summary>
            Constructor using the default PCM ID (0)
            </summary>
      <param name="channel">The channel on the PCM to control (0..7).</param>
    </member>
    <member name="M:WPILib.Solenoid.#ctor(System.Int32,System.Int32)">
      <summary>
            Constructor.
            </summary>
      <param name="moduleNumber">The CAN ID of the PCM the solenoid is attached to.</param>
      <param name="channel">The channel on the PCM to control (0..7).</param>
    </member>
    <member name="M:WPILib.Solenoid.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.Solenoid.Get">
      <summary>
            Read the current value of the solenoid.
            </summary>
      <returns>The current value of the solenoid.</returns>
    </member>
    <member name="M:WPILib.Solenoid.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Solenoid.IsBlackListed">
      <summary>
            Check if solenoid is blacklisted.
            </summary>
      <returns>If solenoid is disabled due to short.</returns>
    </member>
    <member name="M:WPILib.Solenoid.Set(System.Boolean)">
      <summary>
            Set the value of a solenoid
            </summary>
      <param name="on">Turn the solenoid output off or on.</param>
    </member>
    <member name="P:WPILib.Solenoid.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="P:WPILib.Solenoid.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.Solenoid.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.SolenoidBase">
      <summary>
            The SolenoidBase class is the common base class for the <see cref="T:WPILib.Solenoid" />
            and <see cref="T:WPILib.DoubleSolenoid" /> classes.
            </summary>
    </member>
    <member name="M:WPILib.SolenoidBase.#ctor(System.Int32)">
      <summary>
            Creates a new <see cref="T:WPILib.SolenoidBase" />.
            </summary>
      <param name="moduleNumber">The PCM CAN ID</param>
    </member>
    <member name="M:WPILib.SolenoidBase.ClearAllPCMStickyFaults">
      <summary>
            Clear all sticky faults inside PCM that Compressor is wired to. </summary>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidBlackList">
      <summary>
            Reads complete solenoid blacklist for all 8 solenoids as a single byte.
            </summary>
      <returns>The solenoid blacklist of all 8 solenoids on the module.</returns>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidVoltageFault">
      <summary>
            Returns if PCM is in a fault state
            </summary>
      <returns>true if PCM is in fault state : The common highside solenoid voltage rail is too low, most likely a solenoid channel is shorted.</returns>
    </member>
    <member name="M:WPILib.SolenoidBase.GetPCMSolenoidVoltageStickyFault">
      <summary>
            Returns if a PCM sticky fault is set.
            </summary>
      <returns>True if PCM sticky fault is set : The common highside solenoid voltage rail is too low, most likely a solenoid channel is shorted.</returns>
    </member>
    <member name="F:WPILib.SolenoidBase.m_moduleNumber">
      <summary>
            The module number for the solenoid.
            </summary>
    </member>
    <member name="F:WPILib.SolenoidBase.s_allocated">
      <summary>
            The allocated resources for the solenoid.
            </summary>
    </member>
    <member name="T:WPILib.SPI">
      <summary>
            This class is used to interface with the SPI ports on the RoboRIO
            </summary>
    </member>
    <member name="M:WPILib.SPI.#ctor(WPILib.SPI.Port)">
      <summary>
            Creates a new SPI class.
            </summary>
      <param name="port">The physical SPI Port</param>
    </member>
    <member name="M:WPILib.SPI.Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="initiate">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>initiate</parameter>
            <parameter>M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dataReceived">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataReceived</parameter>
            <parameter>M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="size">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>size</parameter>
            <parameter>M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SPI.Read(System.Boolean,System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SPI.SetChipSelectActiveHigh">
      <summary>
            Configure the chip select line to be active high.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetChipSelectActiveLow">
      <summary>
            Configure the chip select line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockActiveHigh">
      <summary>
            Configure the clock line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockActiveLow">
      <summary>
            Configure the clock line to be active low.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetClockRate(System.Int32)">
      <summary>
            Sets the Generated SPI Clock Rate
            </summary>
      <param name="hz">Rate in Hz.</param>
    </member>
    <member name="M:WPILib.SPI.SetLSBFirst">
      <summary>
            Set the port to send and receive the LSB First.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetMSBFirst">
      <summary>
            Set the port to send and receive the MSB First.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetSampleDataOnFalling">
      <summary>
            Configure the data to be stable on the falling edge and changing on the rising edge.
            </summary>
    </member>
    <member name="M:WPILib.SPI.SetSampleDataOnRising">
      <summary>
            Configure the data to be stable on the rising edge and changing on the falling edge.
            </summary>
    </member>
    <member name="M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </summary>
      <param name="dataToSend">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataToSend</parameter>
            <parameter>M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="dataReceived">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>dataReceived</parameter>
            <parameter>M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="size">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>size</parameter>
            <parameter>M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SPI.Transaction(System.Byte[],System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SPI.Write(System.Byte[],System.Int32)">
      <summary>
            Writes the data to the slave device.
            </summary>
      <param name="dataToSend">The byte array to send.</param>
      <param name="size">The size of the byte array.</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SPI.Write(System.Byte[],System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:WPILib.SPI.Port">
      <summary>
            The SPI ports available
            </summary>
    </member>
    <member name="F:WPILib.SPI.Port.OnboardCS0"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS1"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS2"></member>
    <member name="F:WPILib.SPI.Port.OnboardCS3"></member>
    <member name="F:WPILib.SPI.Port.MXP"></member>
    <member name="T:WPILib.StopBits">
      <summary>
            Specifies the number of stop bits used for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.StopBits.One"></member>
    <member name="F:WPILib.StopBits.OnePointFive"></member>
    <member name="F:WPILib.StopBits.Two"></member>
    <member name="T:WPILib.Talon">
      <summary>
            Cross the Road Electronics (CTRE) Talon and Talon SR Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.Talon.#ctor(System.Int32)">
      <summary>
            Creates a new Talon or Talon SR Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the Talon is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Talon.InitTalon">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.TalonSRX">
      <summary>
            Cross the Road Electronics (CTRE) Talon SRX Speed Controller with PWM control</summary>
    </member>
    <member name="M:WPILib.TalonSRX.#ctor(System.Int32)">
      <summary>
            Creates a new Talon SRX Motor Controller in PWM mode.
            </summary>
      <param name="channel">The PWM Channel that the TalonSRX is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.TalonSRX.InitTalonSRX">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.Timer">
      <summary>
            This class is used to create timers
            </summary>
    </member>
    <member name="M:WPILib.Timer.#ctor">
      <summary>
            Creates a new Timer
            </summary>
    </member>
    <member name="M:WPILib.Timer.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time.</summary>
      <param name="seconds">Length of time to pause (seconds)</param>
    </member>
    <member name="M:WPILib.Timer.Get">
      <summary>
            Get the current time from the timer.</summary>
      <returns>Current time value for this timer in seconds</returns>
    </member>
    <member name="M:WPILib.Timer.GetFPGATimestamp">
      <summary>
            Return the system clock time in seconds.
            </summary>
      <returns>The FPGA timestamp in seconds.</returns>
    </member>
    <member name="M:WPILib.Timer.GetMatchTime">
      <summary>
            Return the approximate match time since the beginning of autonomous </summary>
      <returns>Match time since the beginning of autonomous.</returns>
    </member>
    <member name="M:WPILib.Timer.HasPeriodPassed(System.Double)">
      <summary>
            Check if the period specified has passed and if it has, advance the start
            time by that period.</summary>
      <param name="period">The period to check for (in seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Timer.Reset">
      <summary>
            Reset the timer by setting the time to 0.
            </summary>
    </member>
    <member name="M:WPILib.Timer.Start">
      <summary>
            Start the timer running.
            </summary>
    </member>
    <member name="M:WPILib.Timer.Stop">
      <summary>
            Stop the timer. </summary>
    </member>
    <member name="T:WPILib.Timer.IStaticTimerInterface">
      <summary>
            This interface is used to specify the static timer functions to be used by the <see cref="T:WPILib.Timer" /> class.
            </summary>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time
            </summary>
      <param name="seconds">Length of time to pause</param>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.GetFPGATimestamp">
      <summary>
            Returns the system clock time in seconds.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Timer.IStaticTimerInterface.GetFPGATimestamp</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.GetMatchTime">
      <summary>
            Returns the Match Time in seconds
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Timer.IStaticTimerInterface.GetMatchTime</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Timer.IStaticTimerInterface.NewTimer">
      <summary>
            Creates a new Timer
            </summary>
      <returns>A new timer</returns>
    </member>
    <member name="T:WPILib.Timer.ITimerInterface">
      <summary>
            This interface is used to specify the instance timer functions to be used by the <see cref="T:WPILib.Timer" /> class.
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Get">
      <summary>
            Get the current time from the timer
            </summary>
      <returns>Current time in seconds</returns>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.HasPeriodPassed(System.Double)">
      <summary>
            Check if the specified period has passed.
            If so, advance the start time by that period.
            </summary>
      <param name="period">The period to check for (seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Reset">
      <summary>
            Reset the timer, and start the timer.
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Start">
      <summary>
            Start the timer running
            </summary>
    </member>
    <member name="M:WPILib.Timer.ITimerInterface.Stop">
      <summary>
            Stop the timer
            </summary>
    </member>
    <member name="T:WPILib.Ultrasonic">
      <summary>
            Ultrasonic rangefinder class, for digital ultransonics. Not for the MaxBotix Sensors
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.#ctor(System.Int32,System.Int32,WPILib.Ultrasonic.Unit)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Ultrasonic" /> Sensor.
            </summary>
      <param name="pingChannel">The digital output channel that sends the pulse 
            to initiate the sensor sending the ping</param>
      <param name="echoChannel">The digital input channel the receives the echo.
            The lenght of time that the echo is high represents the round trip time of 
            the ping, and the distance/</param>
      <param name="units">The units returns in either <see cref="F:WPILib.Ultrasonic.Unit.Inches">Inches</see>
            or <see cref="F:WPILib.Ultrasonic.Unit.Millimeters">Millimeters</see>. Default is inches.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.#ctor(WPILib.DigitalOutput,WPILib.DigitalInput,WPILib.Ultrasonic.Unit)">
      <summary>
            Create an instance of the <see cref="T:WPILib.Ultrasonic" /> Sensor.
            </summary>
      <param name="pingChannel">The <see cref="T:WPILib.DigitalOutput" /> channel that sends the pulse 
            to initiate the sensor sending the ping</param>
      <param name="echoChannel">The <see cref="T:WPILib.DigitalInput" /> channel the receives the echo.
            The lenght of time that the echo is high represents the round trip time of 
            the ping, and the distance/</param>
      <param name="units">The units returns in either <see cref="F:WPILib.Ultrasonic.Unit.Inches">Inches</see>
            or <see cref="F:WPILib.Ultrasonic.Unit.Millimeters">Millimeters</see></param>
    </member>
    <member name="P:WPILib.Ultrasonic.AutomaticModeEnabled">
      <summary>
            Get or Set whether automatic mode is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.Dispose">
      <summary>
            Destructor for the ultrasonic sensor.
            </summary>
    </member>
    <member name="P:WPILib.Ultrasonic.DistanceUnits">
      <summary>
            Gets or Sets the current <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is used for the 
            <see cref="T:WPILib.Interfaces.IPIDSource" /> base object.
            </summary>
    </member>
    <member name="P:WPILib.Ultrasonic.Enabled">
      <summary>
            Gets or Sets whether the ultrasonic is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.GetDistanceUnits">
      <summary>
            Get the current <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is used for the
            <see cref="T:WPILib.Interfaces.IPIDSource" /> base object.
            </summary>
      <returns>The type of <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> that is being used.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetEnabled">
      <summary>
            Gets if the ultrasonic is enabled
            </summary>
      <returns>true if enabled</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetRangeInches">
      <summary>
            Get the range in inches from the ultrasonic sensor.
            </summary>
      <returns>Range in inches of the target returned from the ultrasonic sensor. 
            Returns 0 if there is no valid value.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.GetRangeMM">
      <summary>
            Get the range in millimeters from the ultrasonic sensor.
            </summary>
      <returns>Range in millimeters of the target returned from the ultrasonic sensor. 
            Returns 0 if there is no valid value.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.InitTable(NetworkTables.Tables.ITable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Ultrasonic.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="subtable">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>subtable</parameter>
            <parameter>M:WPILib.Ultrasonic.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Ultrasonic.IsRangeValid">
      <summary>
            Check if there is a valid range measurement.
            </summary>
      <returns>If the range is valid.</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.PidGet">
      <summary>
            Get the result to use in PIDController
            </summary>
      <returns>The result to use in PIDController</returns>
    </member>
    <member name="M:WPILib.Ultrasonic.Ping">
      <summary>
            Ping a single ultrasonic sensor.
            </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.SetAutomaticMode(System.Boolean)">
      <summary>
            Turn Automatic mode on/off.
            </summary>
      <param name="enabling">Set to true to enable round robin scheduling.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.SetDistanceUnits(WPILib.Ultrasonic.Unit)">
      <summary>
            Set the current Distance Unit that should be used for the <see cref="T:WPILib.Interfaces.IPIDSource" />
            base object.
            </summary>
      <param name="units">The <see cref="T:WPILib.Ultrasonic.Unit">Distance Unit</see> to use.</param>
    </member>
    <member name="M:WPILib.Ultrasonic.SetEnabled(System.Boolean)">
      <summary>
            Set if the ultrasonic is enabled.
            </summary>
      <param name="enabled">true if enabled</param>
    </member>
    <member name="P:WPILib.Ultrasonic.SmartDashboardType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Ultrasonic.SmartDashboardType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.StartLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Ultrasonic.StartLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.StopLiveWindowMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Ultrasonic.StopLiveWindowMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Ultrasonic.Table">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Ultrasonic.Table</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Ultrasonic.UpdateTable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Ultrasonic.UpdateTable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Ultrasonic.Unit">
      <summary>
            The unit for measurements to return.
            </summary>
    </member>
    <member name="F:WPILib.Ultrasonic.Unit.Inches"></member>
    <member name="F:WPILib.Ultrasonic.Unit.Millimeters"></member>
    <member name="T:WPILib.Utility">
      <summary>
            Contains global utility functions
            </summary>
    </member>
    <member name="M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)">
      <summary>
            This is used to check the status's returned from the HAL functions.
            </summary>
      <param name="status">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>status</parameter>
            <parameter>M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="memberName">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>memberName</parameter>
            <parameter>M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="filePath">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>filePath</parameter>
            <parameter>M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
      <param name="lineNumber">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>lineNumber</parameter>
            <parameter>M:WPILib.Utility.CheckStatus(System.Int32,System.String,System.String,System.Int32)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Utility.GetFPGARevision">
      <summary>
            Return the FPGA Revision number. The format of the revision is 3 numbers. </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Utility.GetFPGARevision</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Utility.GetFPGATime">
      <summary>
            Read the microsecond timer from the FPGA
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Utility.GetFPGATime</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Utility.GetFPGAVersion">
      <summary>
            Return the FPGA Version number. For now, expect this to be 2015.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Utility.GetFPGAVersion</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Utility.GetUserButton">
      <summary>
            Get the state of the "USER" button on the RoboRIO
            </summary>
      <returns>True if the button is currently pressed down</returns>
    </member>
    <member name="T:WPILib.Victor">
      <summary>
            VEX Robotics Victor 888 Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.Victor.#ctor(System.Int32)">
      <summary>
            Creates a new Victor 888 Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the Victor is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.Victor.InitVictor">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.VictorSP">
      <summary>
            VEX Robotics Victor SP Speed Controller
            </summary>
    </member>
    <member name="M:WPILib.VictorSP.#ctor(System.Int32)">
      <summary>
            Creates a new VictorSP Motor Controller.
            </summary>
      <param name="channel">The PWM Channel that the VictorSP is attached to. 0-9 are on-board, 10-19 are on the MXP port</param>
    </member>
    <member name="M:WPILib.VictorSP.InitVictorSP">
      <summary>
            Common initialization code called by all constructors.
            </summary>
    </member>
    <member name="T:WPILib.WaitResult">
      <summary>
            The Result returned from a synchronous interrupt
            </summary>
    </member>
    <member name="F:WPILib.WaitResult.Timeout"></member>
    <member name="F:WPILib.WaitResult.RisingEdge"></member>
    <member name="F:WPILib.WaitResult.FallingEdge"></member>
    <member name="F:WPILib.WaitResult.Both"></member>
    <member name="T:WPILib.WriteBufferMode">
      <summary>
            Specifies the WriteBufferMode for a <see cref="T:WPILib.SerialPort" /> object.
            </summary>
    </member>
    <member name="F:WPILib.WriteBufferMode.FlushOnAccess"></member>
    <member name="F:WPILib.WriteBufferMode.FlushWhenFull"></member>
    <member name="T:WPILib.Buttons.Button">
      <summary>
             This class provides an easy way to link commands to OI inputs.
             </summary>
    </member>
    <member name="M:WPILib.Buttons.Button.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Buttons.Button</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Buttons.Button.CancelWhenPressed(WPILib.Commands.Command)">
      <summary>
            Cancel the command when the button is pressed.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.ToggleWhenPressed(WPILib.Commands.Command)">
      <summary>
            Toggles the command whenever the button is pressed (on then off then on)
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhenPressed(WPILib.Commands.Command)">
      <summary>
            Starts the given command whenever the button is newly pressed
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhenReleased(WPILib.Commands.Command)">
      <summary>
            Starts the command when the button is released
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Button.WhileHeld(WPILib.Commands.Command)">
      <summary>
            Constantly starts the given command while the button is held.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="T:WPILib.Buttons.ButtonScheduler">
      <summary>
            An internal class of <see cref="T:WPILib.Buttons.Trigger" />. The user should ignore this, it is
            only public to interface between packages
            </summary>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.#ctor(System.Boolean,WPILib.Buttons.Trigger,WPILib.Commands.Command)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Buttons.ButtonScheduler</parameter>
          </include>
        </markup>
      </summary>
      <param name="last">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>last</parameter>
            <parameter>M:WPILib.Buttons.ButtonScheduler.#ctor(System.Boolean,WPILib.Buttons.Trigger,WPILib.Commands.Command)</parameter>
          </include>
        </markup>
      </param>
      <param name="button">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>button</parameter>
            <parameter>M:WPILib.Buttons.ButtonScheduler.#ctor(System.Boolean,WPILib.Buttons.Trigger,WPILib.Commands.Command)</parameter>
          </include>
        </markup>
      </param>
      <param name="orders">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>orders</parameter>
            <parameter>M:WPILib.Buttons.ButtonScheduler.#ctor(System.Boolean,WPILib.Buttons.Trigger,WPILib.Commands.Command)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.Execute">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Buttons.ButtonScheduler.Execute</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_button">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Buttons.ButtonScheduler.m_button</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_command">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Buttons.ButtonScheduler.m_command</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="F:WPILib.Buttons.ButtonScheduler.m_pressedLast">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>F:WPILib.Buttons.ButtonScheduler.m_pressedLast</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Buttons.ButtonScheduler.Start">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Buttons.ButtonScheduler.Start</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Buttons.InternalButton">
      <summary>
            This class is intended to be used within a program. The programmer can manually set its value.
            Also include a setting for whether or not it should invert its value.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.#ctor">
      <summary>
            Creates an InternalButton that is not inverted
            </summary>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.#ctor(System.Boolean)">
      <summary>
            Creates an InternalButton which is inverted depending on the input.
            </summary>
      <param name="inverted">If false, then this button is pressed when set to true, otherwise it is pressed when set to false.</param>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.Get">
      <summary>
            Returns whether or not the trigger is active
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.SetInverted(System.Boolean)">
      <summary>
            Sets whether the button is inverted.
            </summary>
      <param name="inverted">True if inverted.</param>
    </member>
    <member name="M:WPILib.Buttons.InternalButton.SetPressed(System.Boolean)">
      <summary>
            Sets whether the button is pressed
            </summary>
      <param name="pressed">True if pressed</param>
    </member>
    <member name="T:WPILib.Buttons.NetworkButton">
      <summary>
            This class represents a button hosted by the NetworkTable.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.#ctor(NetworkTables.NetworkTable,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Buttons.NetworkButton" /> class
            </summary>
      <param name="table">The <see cref="T:NetworkTables.NetworkTable" /> to locate the button on</param>
      <param name="field">The name of the button</param>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Buttons.NetworkButton" /> class
            </summary>
      <param name="table">The name of the table to locate the button on</param>
      <param name="field">The name of the button</param>
    </member>
    <member name="M:WPILib.Buttons.NetworkButton.Get">
      <summary>
            Returns whether or not the trigger is active
            
            This method will be called repeatedly a command is linked to the Trigger.
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="T:WPILib.Buttons.Trigger">
      <summary>
            This class provides an easy way to link commands to inputs.
            </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Buttons.Trigger</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.CancelWhenActive(WPILib.Commands.Command)">
      <summary>
            Cancel the command when the button is pressed.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.Get">
      <summary>
            Returns whether or not the trigger is active
            </summary>
      <returns>Whether or not the trigger condition is active.</returns>
    </member>
    <member name="M:WPILib.Buttons.Trigger.Grab">
      <summary>
            Returns whether Get() return true or the internal table for SmartDashboard use is pressed.
            </summary>
      <returns>Whether <see cref="M:WPILib.Buttons.Trigger.Get" /> return true or the internal table for SmartDashboard use is pressed</returns>
    </member>
    <member name="M:WPILib.Buttons.Trigger.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Buttons.Trigger.SmartDashboardType">
      <summary>
            These methods continue to return the "Button" SmartDashboard type until we decided
            to create a Trigger widget type for the dashboard.
            </summary>
    </member>
    <member name="P:WPILib.Buttons.Trigger.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Buttons.Trigger.ToggleWhenActive(WPILib.Commands.Command)">
      <summary>
            Toggles the command whenever the button is pressed (on then off then on)
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhenActive(WPILib.Commands.Command)">
      <summary>
            Starts the given command whenever the trigger just becomes active.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhenInactive(WPILib.Commands.Command)">
      <summary>
            Starts the command when the button is released
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="M:WPILib.Buttons.Trigger.WhileActive(WPILib.Commands.Command)">
      <summary>
            Constantly starts the given command while the button is held.
            </summary>
      <param name="command">The command to start</param>
    </member>
    <member name="T:WPILib.CAN.CANInvalidBufferException">
      <summary>
            Exception indicating that a CAN driver library entry-point
            was passed an invalid buffer. </summary>
    </member>
    <member name="M:WPILib.CAN.CANInvalidBufferException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANInvalidBufferException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CAN.CANJaguarVersionException">
      <summary>
            Exception indicating that the CAN Jaguar does not have the correct version
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANJaguarVersionException.#ctor(System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.CAN.CANJaguarVersionException" /> class
            </summary>
      <param name="deviceNumber">The Device Number</param>
      <param name="fwVersion">The FW Version</param>
    </member>
    <member name="F:WPILib.CAN.CANJaguarVersionException.MinLegalFIRSTFirmwareVersion">
      <summary>
            The Minimum FIRST Legal version of the firmware
            </summary>
    </member>
    <member name="F:WPILib.CAN.CANJaguarVersionException.MinRDKFirmwareVersion">
      <summary>
            The Minimum RDK Firmware Version
            </summary>
    </member>
    <member name="T:WPILib.CAN.CANMessageNotAllowedException">
      <summary>
            Exception indicating that the Jaguar CAN Driver layer refused to send a
            restricted message ID to the CAN bus.
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANMessageNotAllowedException.#ctor(System.String)">
      <summary>
            Initialized a new instance of the <see cref="T:WPILib.CAN.CANMessageNotAllowedException" /> class
            </summary>
      <param name="msg"></param>
    </member>
    <member name="T:WPILib.CAN.CANMessageNotFoundException">
      <summary>
            Exception indicating that a can message is not available from Network
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANMessageNotFoundException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANMessageNotFoundException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.CAN.CANNotInitializedException">
      <summary>
            Exception indicating that the CAN driver layer has not been initialized.
            </summary>
    </member>
    <member name="M:WPILib.CAN.CANNotInitializedException.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.CAN.CANNotInitializedException</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Commands.Command">
      <summary>
            The Command class is at the very core of the entire command framework.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor">
      <summary>
            Creates a new command.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.Double)">
      <summary>
            Creates a new command with the given timeout and a default name.
            </summary>
      <param name="timeout">The time (in seconds) before this command "times out"</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.String)">
      <summary>
            Creates a new command with the given name.
            </summary>
      <param name="name">The name for this command</param>
      <exception cref="T:System.ArgumentNullException">If name is null</exception>
    </member>
    <member name="M:WPILib.Commands.Command.#ctor(System.String,System.Double)">
      <summary>
            Creates a new command with the given name and timeout.
            </summary>
      <param name="name">The name of the command</param>
      <param name="timeout">The time (in seconds) before this command "times out"</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="M:WPILib.Commands.Command.Cancel">
      <summary>
            This will cancel the current command.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Canceled">
      <summary>
            Gets whether or not this has been canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.DoesRequire(WPILib.Commands.Subsystem)">
      <summary>
            Checks if the command requires the given <see cref="T:WPILib.Commands.Subsystem" />.
            </summary>
      <param name="system">The system</param>
      <returns>Whether or not the subsystem is required, or false if given null.</returns>
    </member>
    <member name="M:WPILib.Commands.Command.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.GetGroup">
      <summary>
            Returns the <see cref="T:WPILib.Commands.CommandGroup" /> this command is a part of.
            </summary>
      <returns>The <see cref="T:WPILib.Commands.CommandGroup" /> that this command is a part of (or null if not in a group)</returns>
    </member>
    <member name="M:WPILib.Commands.Command.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="M:WPILib.Commands.Command.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Interruptible">
      <summary>
            Get or Set whether or not this command can be interrupted.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="M:WPILib.Commands.Command.IsRunning">
      <summary>
            Returns whether or not the command is running.
            </summary>
      <returns>Whether or not the command is running</returns>
    </member>
    <member name="M:WPILib.Commands.Command.IsTimedOut">
      <summary>
            Returns whether or not the <see cref="M:WPILib.Commands.Command.TimeSinceInitialized" /> 
            method returns a number which is greater then or equal to the timeout for the command.
            </summary>
      <returns>Whether the time has expired.</returns>
    </member>
    <member name="P:WPILib.Commands.Command.Name">
      <summary>
            Returns the name of this command.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Requires(WPILib.Commands.Subsystem)">
      <summary>
            This method specifies that the given <see cref="T:WPILib.Commands.Subsystem" /> is used by this command.
            </summary>
      <param name="subsystem">The <see cref="T:WPILib.Commands.Subsystem" /> required</param>
      <exception cref="T:System.ArgumentNullException">If subsystem is null</exception>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If this command has started before or if it has been given to a <see cref="T:WPILib.Commands.CommandGroup" /></exception>
    </member>
    <member name="P:WPILib.Commands.Command.RunWhenDisabled">
      <summary>
            Gets or Sets whether or not this <see cref="T:WPILib.Commands.Command" /> should run when the robot is disabled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.SetTimeout(System.Double)">
      <summary>
            Sets the timeout of this command.
            </summary>
      <param name="seconds">the timeout (in seconds)</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If given a negative timeout</exception>
    </member>
    <member name="P:WPILib.Commands.Command.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.Start">
      <summary>
            Starts up the command.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Command.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="M:WPILib.Commands.Command.TimeSinceInitialized">
      <summary>
            Returns the time since this command was initialized (in seconds).
            </summary>
      <returns>The time since this command was initialize (in seconds).</returns>
    </member>
    <member name="M:WPILib.Commands.Command.ToString">
      <summary>
            The string representation for a <see cref="T:WPILib.Commands.Command" /> is by default its name.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
    </member>
    <member name="M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)">
      <summary>
            This function is called whenever the value is changed on the NetworkTable.
            </summary>
      <param name="source">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>source</parameter>
            <parameter>M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="isNew">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>isNew</parameter>
            <parameter>M:WPILib.Commands.Command.ValueChanged(NetworkTables.Tables.ITable,System.String,System.Object,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Commands.CommandGroup">
      <summary>
            A <see cref="T:WPILib.Commands.CommandGroup" /> is a list of commands which are executed in sequence.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.#ctor">
      <summary>
            Creates a new <see cref="T:WPILib.Commands.CommandGroup" />. The name of this command
            will be set to its class name.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:WPILib.Commands.CommandGroup" /> with the given name.
            </summary>
      <param name="name">The name for this command group.</param>
      <exception cref="T:System.ArgumentNullException">If name is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddParallel(WPILib.Commands.Command)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddParallel(WPILib.Commands.Command,System.Double)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group with the given timeout.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <param name="timeout">The timeout (in seconds).</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the given timeout is negative.</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddSequential(WPILib.Commands.Command)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.AddSequential(WPILib.Commands.Command,System.Double)">
      <summary>
            Adds a new <see cref="T:WPILib.Commands.Command" /> to the group with a given timeout.
            </summary>
      <param name="command">The <see cref="T:WPILib.Commands.Command" /> to be added.</param>
      <param name="timeout">The timeout (in seconds).</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the group has been started before or been given to another group.</exception>
      <exception cref="T:System.ArgumentNullException">If the given <see cref="T:WPILib.Commands.Command" /> is null</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the given timeout is negative.</exception>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="P:WPILib.Commands.CommandGroup.Interruptible">
      <summary>
            Returns whether or not this group is interruptible.
            </summary>
    </member>
    <member name="M:WPILib.Commands.CommandGroup.IsFinished">
      <summary>
            Returns true if all the <see cref="T:WPILib.Commands.Command">Commands</see> in this group have
            been started and have finished.
            </summary>
      <returns>Whether this <see cref="T:WPILib.Commands.CommandGroup" /> is finished.</returns>
    </member>
    <member name="T:WPILib.Commands.IllegalUseOfCommandException">
      <summary>
            This exception will be thrown if a command is used illegally.
            </summary>
    </member>
    <member name="M:WPILib.Commands.IllegalUseOfCommandException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Commands.IllegalUseOfCommandException" /> class
            </summary>
    </member>
    <member name="M:WPILib.Commands.IllegalUseOfCommandException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:WPILib.Commands.IllegalUseOfCommandException" /> class with the given message.
            </summary>
      <param name="message">The message</param>
    </member>
    <member name="T:WPILib.Commands.PIDCommand">
      <summary>
            This class defines a <see cref="T:WPILib.Commands.Command" /> which interacts heavily with a PID loop.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i and d values,
            and use the class name as its name
            </summary>
      <param name="p"></param>
      <param name="i"></param>
      <param name="d"></param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDCommand</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PIDCommand" /> that will use the given p, i and d values.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="p">The proportional value.</param>
      <param name="i">The integral value.</param>
      <param name="d">The derivative value.</param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDCommand</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._End">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand._End</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._Initialize">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand._Initialize</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand._Interrupted">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand._Interrupted</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.GetPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.GetPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.GetPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.GetSetpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.GetSetpoint</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.GetSetpoint</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.InitTable(NetworkTables.Tables.ITable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="table">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>table</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.PIDController">
      <summary>
            Returns the <see cref="P:WPILib.Commands.PIDCommand.PIDController" /> used by this <see cref="T:WPILib.Commands.PIDCommand" />.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.ReturnPIDInput">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.ReturnPIDInput</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.ReturnPIDInput</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.SetInputRange(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="minimumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumInput</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="maximumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maximumInput</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.SetSetpoint(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetSetpoint(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="setpoint">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>setpoint</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetSetpoint(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.SetSetpointRelative(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetSetpointRelative(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="deltaSetpoint">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>deltaSetpoint</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.SetSetpointRelative(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Commands.PIDCommand.SmartDashboardType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Commands.PIDCommand.SmartDashboardType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDCommand.UsePIDOutput(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.UsePIDOutput(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.Commands.PIDCommand.UsePIDOutput(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Commands.PIDSubsystem">
      <summary>
            This class is designed to handle the case where there is a <see cref="T:WPILib.Commands.Subsystem" />
            which uses a single <see cref="T:WPILib.PIDController">PIDController</see> almost constantly.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.PIDSubsystem</parameter>
          </include>
        </markup>
      </summary>
      <param name="name">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>name</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="f">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>f</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="period">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>period</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.#ctor(System.String,System.Double,System.Double,System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.Disable">
      <summary>
            Disables the internal <see cref="T:WPILib.PIDController">PIDController</see></summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.Enable">
      <summary>
            Enables the internal <see cref="T:WPILib.PIDController">PIDController</see></summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.GetPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.GetPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.GetPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.GetSetpoint">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.GetSetpoint</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.GetSetpoint</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.InitTable(NetworkTables.Tables.ITable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="table">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>table</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.InitTable(NetworkTables.Tables.ITable)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.OnTarget">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.OnTarget</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.OnTarget</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.PIDController">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Commands.PIDSubsystem.PIDController</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.PositionRelative">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Commands.PIDSubsystem.PositionRelative</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.ReturnPIDInput">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.ReturnPIDInput</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.ReturnPIDInput</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetAbsoluteTolerance(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetAbsoluteTolerance(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="t">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>t</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetAbsoluteTolerance(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetInputRange(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="minimumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumInput</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="maximumInput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maximumInput</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetInputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetOutputRange(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="minimumOutput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>minimumOutput</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="maximumOutput">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>maximumOutput</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetOutputRange(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetPercentTolerance(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetPercentTolerance(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetPercentTolerance(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.SetSetpoint(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetSetpoint(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.SetSetpoint(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Commands.PIDSubsystem.SmartDashboardType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Commands.PIDSubsystem.SmartDashboardType</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.PIDSubsystem.UsePIDOutput(System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.UsePIDOutput(System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="output">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>output</parameter>
            <parameter>M:WPILib.Commands.PIDSubsystem.UsePIDOutput(System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.Commands.PrintCommand">
      <summary>
            A <see cref="T:WPILib.Commands.PrintCommand" /> is a command which prints out a string when it is initialized, and then immediately finishes.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.#ctor(System.String)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.PrintCommand" /> which will print the given message when it is run.
            </summary>
      <param name="message">The message to print.</param>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.PrintCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.Scheduler">
      <summary>
            The <see cref="T:WPILib.Commands.Scheduler" /> is a singleton which holds the top-level running commands.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.AddButton(WPILib.Buttons.ButtonScheduler)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.AddButton(WPILib.Buttons.ButtonScheduler)</parameter>
          </include>
        </markup>
      </summary>
      <param name="button">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>button</parameter>
            <parameter>M:WPILib.Commands.Scheduler.AddButton(WPILib.Buttons.ButtonScheduler)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.Scheduler.AddCommand(WPILib.Commands.Command)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.AddCommand(WPILib.Commands.Command)</parameter>
          </include>
        </markup>
      </summary>
      <param name="command">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>command</parameter>
            <parameter>M:WPILib.Commands.Scheduler.AddCommand(WPILib.Commands.Command)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Disable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.Disable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Enable">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.Enable</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.GetType">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.GetType</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Commands.Scheduler.GetType</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Commands.Scheduler.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Instance">
      <summary>
            Returns the <see cref="T:WPILib.Commands.Scheduler" />, creating it if one does not exist.
            </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.RemoveAll">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.RemoveAll</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.Scheduler.Run">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Commands.Scheduler.Run</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Commands.Scheduler.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Commands.StartCommand">
      <summary>
            A <see cref="T:WPILib.Commands.StartCommand" /> will call the <see cref="M:WPILib.Commands.Command.Start">Start()</see> method of another
            command when it is initialized and will finish immediately.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.#ctor(WPILib.Commands.Command)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.StartCommand" /> which will start the given command when its 
            <see cref="M:WPILib.Commands.StartCommand.Initialize" /> is called.
            </summary>
      <param name="commandToStart">The <see cref="T:WPILib.Commands.Command" /> to start.</param>
    </member>
    <member name="M:WPILib.Commands.StartCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.StartCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.Subsystem">
      <summary>
            This class defines a major component of the robot.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.#ctor">
      <summary>
            Creates a subsystem. This will set the name to the name of the class.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.#ctor(System.String)">
      <summary>
            Creates a subsystem with the given name.
            </summary>
      <param name="name">The name of the subsystem.</param>
    </member>
    <member name="M:WPILib.Commands.Subsystem.GetCurrentCommand">
      <summary>
            Returns the command which currently claims this subsystem.
            </summary>
      <returns>The command which currently claims this subsystem.</returns>
    </member>
    <member name="M:WPILib.Commands.Subsystem.InitDefaultCommand">
      <summary>
            Initialize the default command for a subsystem.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Commands.Subsystem.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="M:WPILib.Commands.Subsystem.SetDefaultCommand(WPILib.Commands.Command)">
      <summary>
            Sets the default command.
            </summary>
      <param name="command">The default command(or null if there should be none.</param>
      <exception cref="T:WPILib.Commands.IllegalUseOfCommandException">If the command does not require the subsystem.</exception>
    </member>
    <member name="P:WPILib.Commands.Subsystem.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Commands.Subsystem.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Commands.WaitCommand">
      <summary>
            A <see cref="T:WPILib.Commands.WaitCommand" /> will wait for a certain amount of time before finishing.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.#ctor(System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.WaitCommand" /> with the given timeout.
            </summary>
      <param name="timeout">The time the command takes to run.</param>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.#ctor(System.String,System.Double)">
      <summary>
            Instantiates a <see cref="T:WPILib.Commands.WaitCommand" /> with the given timeout.
            </summary>
      <param name="name">The name of the command.</param>
      <param name="timeout">The time the command takes to run.</param>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.WaitForChildren">
      <summary>
            This command will only finish if whatever <see cref="T:WPILib.Commands.CommandGroup" />
            it is in has no active children.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Commands.WaitForChildren</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitForChildren.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Commands.WaitUntilCommand">
      <summary>
            This command waits until an absolute game time.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.#ctor(System.Double)">
      <summary>
            Initializes a new <see cref="T:WPILib.Commands.WaitUntilCommand" />.
            </summary>
      <param name="time">The time to wait until.</param>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.End">
      <summary>
            Called when the command ended peacefully
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Execute">
      <summary>
            The execute method is called repeatedly until this <see cref="T:WPILib.Commands.Command" />
            either finishes or is canceled.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Initialize">
      <summary>
            The initialize method is called the first time this Command is run after
            being started.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.Interrupted">
      <summary>
            Called when the command ends because somebody called <see cref="M:WPILib.Commands.Command.Cancel" /> or another command
            shared the same requirements as this one, and booted it out.
            </summary>
    </member>
    <member name="M:WPILib.Commands.WaitUntilCommand.IsFinished">
      <summary>
            Returns whether this command is finished.
            </summary>
      <returns>Whether this command is finished</returns>
    </member>
    <member name="T:WPILib.Exceptions.AllocationException">
      <summary>
            Exception indicating that the resource is already allocated.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.AllocationException.#ctor(System.String)">
      <summary>
            Create a new AllocationException
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.AnalogTriggerException">
      <summary>
            Exceptions dealing with improper operation of the Analog trigger.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.AnalogTriggerException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to pass to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.BaseSystemNotInitializedException">
      <summary>
            Thrown if there is an error caused by a basic system or setting
            not being properly initialized before being used.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.BaseSystemNotInitializedException.#ctor(System.Object,System.Object)">
      <summary>
            Create a new BaseSystemNotInitializedException using the offending class that was not set and the
            class that was affected.
            </summary>
      <param name="offender">The class or interface that was not properly initialized.</param>
      <param name="affected">The class that was affected by this missing initialization.</param>
    </member>
    <member name="M:WPILib.Exceptions.BaseSystemNotInitializedException.#ctor(System.String)">
      <summary>
            Create a new BaseSystemNotInitializedException
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.BoundaryException">
      <summary>
            This exception represent an error in which a lower limit was set as higher
            then an upper limit.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to attach to the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.AssertWithinBounds(System.Double,System.Double,System.Double)">
      <summary>
            Make sure that the given value is between the upper and lower bounds, and
            throw an exception if they are not.
            </summary>
      <param name="value">The value to check</param>
      <param name="lower">The minimum acceptable value.</param>
      <param name="upper">The maximum acceptable value.</param>
    </member>
    <member name="M:WPILib.Exceptions.BoundaryException.GetMessage(System.Double,System.Double,System.Double)">
      <summary>
            Returns the message for a boundary exception. Used to keep  the message 
            consistent across all boundary exceptions.
            </summary>
      <param name="value">The given value</param>
      <param name="lower">The lower limit</param>
      <param name="upper">The upper limit</param>
      <returns>The message for a boundary exception</returns>
    </member>
    <member name="T:WPILib.Exceptions.InvalidValueException">
      <summary>
            This class represents errors in trying to set relay values contradictory
            to the direction to which the relay is set.
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.InvalidValueException.#ctor(System.String)">
      <summary>
            Create a new exception with the given message
            </summary>
      <param name="message">The message to pass with the exception</param>
    </member>
    <member name="T:WPILib.Exceptions.UncleanStatusException">
      <summary>
            Exception for bad status codes from the chip object
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor">
      <summary>
            Create a new UncleanStatusException
            </summary>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.Int32)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="status">The status code that caused the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.Int32,System.String)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="status">The status code the caused the exception</param>
      <param name="message">A message describing the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.#ctor(System.String)">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <param name="message">A message describing the exception</param>
    </member>
    <member name="M:WPILib.Exceptions.UncleanStatusException.GetStatus">
      <summary>
            Create a new UncleanStatusException
            </summary>
      <returns>The status code that caused the exception</returns>
    </member>
    <member name="T:WPILib.Interfaces.AccelerometerRange">
      <summary>
            Ranges allowed for Accelerometers
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k2G">
      <summary>
            2G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k4G">
      <summary>
            4G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k8G">
      <summary>
            8G Maximum
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.AccelerometerRange.k16G">
      <summary>
            16G Maximum
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ControlMode">
      <summary>
            Mode for determining how the <see cref="T:WPILib.Interfaces.ICANSpeedController" /> is controlled, used internally.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.ControlMode.PercentVbus"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Follower"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Voltage"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Position"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Speed"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Current"></member>
    <member name="F:WPILib.Interfaces.ControlMode.Disabled"></member>
    <member name="T:WPILib.Interfaces.EncodingType">
      <summary>
            Encoding Types for Counters and Encoders.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.EncodingType.K1X"></member>
    <member name="F:WPILib.Interfaces.EncodingType.K2X"></member>
    <member name="F:WPILib.Interfaces.EncodingType.K4X"></member>
    <member name="T:WPILib.Interfaces.Faults">
      <summary>
            Fault enum for CAN devices.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Faults.CurrentFault"></member>
    <member name="F:WPILib.Interfaces.Faults.TemperatureFault"></member>
    <member name="F:WPILib.Interfaces.Faults.BusVoltageFault"></member>
    <member name="F:WPILib.Interfaces.Faults.GateDriverFault"></member>
    <member name="F:WPILib.Interfaces.Faults.FwdLimitSwitch"></member>
    <member name="F:WPILib.Interfaces.Faults.RevLimitSwitch"></member>
    <member name="F:WPILib.Interfaces.Faults.FwdSoftLimit"></member>
    <member name="F:WPILib.Interfaces.Faults.RevSoftLimit"></member>
    <member name="T:WPILib.Interfaces.IAccelerometer">
      <summary>
            Interface for 3-axis accelerometers
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IAccelerometer.AccelerometerRange">
      <summary>
            Common interface for setting the measuring range of an accelerometer
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetX">
      <summary>
            Common interface for getting the x axis acceleration
            </summary>
      <returns>The acceleration along the x axis in g-forces</returns>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetY">
      <summary>
            Common interface for getting the y axis acceleration
            </summary>
      <returns>The acceleration along the y axis in g-forces</returns>
    </member>
    <member name="M:WPILib.Interfaces.IAccelerometer.GetZ">
      <summary>
            Common interface for getting the z axis acceleration
            </summary>
      <returns>The acceleration along the z axis in g-forces</returns>
    </member>
    <member name="T:WPILib.Interfaces.ICANSpeedController">
      <summary>
            Interface for CAN Speed Controllers like <see cref="T:WPILib.CANTalon" /> and <see cref="T:WPILib.CANJaguar" /></summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.ConfigNeutralMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.ConfigNeutralMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.ConfigSoftPositionLimits(System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="forwardLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>forwardLimitPosition</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="reverseLimitPosition">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>reverseLimitPosition</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.ConfigSoftPositionLimits(System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.D">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.D</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.DisableSoftPositionLimits">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.DisableSoftPositionLimits</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.EncoderCodesPerRev">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.EncoderCodesPerRev</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.FaultTime">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.FaultTime</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.FirmwareVersion">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.FirmwareVersion</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.ForwardLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.ForwardLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetBusVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetBusVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetBusVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetFaults">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetFaults</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetFaults</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetForwardLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetForwardLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetOutputCurrent">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetOutputCurrent</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetOutputCurrent</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetOutputVoltage</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetPosition">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetPosition</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetPosition</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetReverseLimitOK">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetReverseLimitOK</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetSpeed">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetSpeed</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetSpeed</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.GetTemperature">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetTemperature</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.GetTemperature</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.I">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.I</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.LimitMode">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.LimitMode</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.MaxOutputVoltage">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.MaxOutputVoltage</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.P">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.P</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.PotentiometerTurns">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.PotentiometerTurns</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.ReverseLimit">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.ReverseLimit</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICANSpeedController.SetPID(System.Double,System.Double,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="p">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>p</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="i">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>i</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="d">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>d</parameter>
            <parameter>M:WPILib.Interfaces.ICANSpeedController.SetPID(System.Double,System.Double,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="P:WPILib.Interfaces.ICANSpeedController.VoltageRampRate">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICANSpeedController.VoltageRampRate</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Interfaces.IController">
      <summary>
            An interface for controllers. Controllers run control loops, the most command
            are PID controllers and there variants, but this includes anything that is
            controlling an actuator in a separate thread.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IController.Disable">
      <summary>
            Stops the control loop from running until explicitly re-enabled by calling
            <see cref="M:WPILib.Interfaces.IController.Enable" /></summary>
    </member>
    <member name="M:WPILib.Interfaces.IController.Enable">
      <summary>
            Allows the control loop to run
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ICounterBase">
      <summary>
            Interface for counting input ticks.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ICounterBase.Direction">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICounterBase.Direction</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.Get">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.Get</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.Get</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.GetPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.GetPeriod</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.GetPeriod</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.GetStopped">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.GetStopped</parameter>
          </include>
        </markup>
      </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.GetStopped</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:WPILib.Interfaces.ICounterBase.MaxPeriod">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>P:WPILib.Interfaces.ICounterBase.MaxPeriod</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Interfaces.ICounterBase.Reset">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.Interfaces.ICounterBase.Reset</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="T:WPILib.Interfaces.IMotorSafety">
      <summary>
            Interface for creating Safe Motors.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Alive">
      <summary>
            Gets whether the motor is alive.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Description">
      <summary>
            Gets a description for the Safe Motor Object.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.Expiration">
      <summary>
            Gets or Sets the expiration time of the motor in seconds.
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.IMotorSafety.SafetyEnabled">
      <summary>
            Gets or Sets whether safety is enabled.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IMotorSafety.StopMotor">
      <summary>
            Stop the motor associated with this PWM object.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.INamedSendable">
      <summary>
            The interface for sendable objects that gives the sendable a default name in the Smart Dashboard
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.INamedSendable.Name">
      <summary>
            Returns the name of the subtable of SmartDashboard that the Sendable object will use.
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.IPIDOutput">
      <summary>
            This interface allows <see cref="T:WPILib.PIDController" /> to write it's results to its output.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDOutput.PidWrite(System.Double)">
      <summary>
            Set the output to the value calculated by <see cref="T:WPILib.PIDController" /></summary>
      <param name="value">Output the value calculated by <see cref="T:WPILib.PIDController" /></param>
    </member>
    <member name="T:WPILib.Interfaces.IPIDSource">
      <summary>
            This interface allows for <see cref="T:WPILib.PIDController" /> to automatically read from this object
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPIDSource.PidGet">
      <summary>
            Get the result to use in <see cref="T:WPILib.PIDController" /></summary>
      <returns>The result to use in <see cref="T:WPILib.PIDController" /></returns>
    </member>
    <member name="T:WPILib.Interfaces.IPotentiometer">
      <summary>
            Interface for Potentiometers
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.IPotentiometer.Get">
      <summary>
            Get the value of the potentiometer
            </summary>
      <returns>The value of the potentiometer</returns>
    </member>
    <member name="T:WPILib.Interfaces.ISendable">
      <summary>
            The base interface for objects that can be sent over the network
            through network tables.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISendable.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.Interfaces.ISendable.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.Interfaces.ISendable.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.Interfaces.ISpeedController">
      <summary>
            Interface for speed controlling devices
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Disable">
      <summary>
            Disable the speed controller.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Get">
      <summary>
            Returns the last value set to this speed controller.
            </summary>
      <returns>The output value between -1.0 and 1.0</returns>
    </member>
    <member name="P:WPILib.Interfaces.ISpeedController.Inverted">
      <summary>
            Inverts the direction of the motors rotation.
            </summary>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Set(System.Double)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
    </member>
    <member name="M:WPILib.Interfaces.ISpeedController.Set(System.Double,System.Byte)">
      <summary>
            Sets the output value for this speed controller.
            </summary>
      <param name="value">The output value between -1.0 and 1.0</param>
      <param name="syncGroup">The update group to add this Set() to, pending UpdateSyncGroup().  If 0, update immediately.</param>
    </member>
    <member name="T:WPILib.Interfaces.LimitMode">
      <summary>
            Determines which sensor to use for position reference.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.LimitMode.SwitchInputsOnly"></member>
    <member name="F:WPILib.Interfaces.LimitMode.SoftPositionLimits"></member>
    <member name="F:WPILib.Interfaces.LimitMode.SrxDisableSwitchInputs"></member>
    <member name="T:WPILib.Interfaces.Limits">
      <summary>
            Limit switch enum for CAN devices
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.Limits.ForwardLimit"></member>
    <member name="F:WPILib.Interfaces.Limits.ReverseLimit"></member>
    <member name="T:WPILib.Interfaces.NeutralMode">
      <summary>
            Determines how the <see cref="T:WPILib.Interfaces.ICANSpeedController" /> behaves when sending a
            zero signal.
            </summary>
    </member>
    <member name="F:WPILib.Interfaces.NeutralMode.Jumper"></member>
    <member name="F:WPILib.Interfaces.NeutralMode.Brake"></member>
    <member name="F:WPILib.Interfaces.NeutralMode.Coast"></member>
    <member name="T:WPILib.Interfaces.PIDSourceParameter">
      <summary>
            A description for the type of output value to provide to a <see cref="T:WPILib.PIDController" /></summary>
    </member>
    <member name="F:WPILib.Interfaces.PIDSourceParameter.Distance"></member>
    <member name="F:WPILib.Interfaces.PIDSourceParameter.Rate"></member>
    <member name="F:WPILib.Interfaces.PIDSourceParameter.Angle"></member>
    <member name="T:WPILib.Internal.HardwareHLUsageReporting">
      <summary>
            The RoboRIO Usage Reporting implementation
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Internal.HardwareHLUsageReporting</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportPIDController(System.Int32)">
      <summary>
            Report PID Controller
            </summary>
      <param name="num">The PID Controller Index</param>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportScheduler">
      <summary>
            Report Scheduler
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareHLUsageReporting.ReportSmartDashboard">
      <summary>
            Report Smart Dashboard.
            </summary>
    </member>
    <member name="T:WPILib.Internal.HardwareTimer">
      <summary>
            Timer objects measure accumulated time in milliseconds.
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.Internal.HardwareTimer</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.Delay(System.Double)">
      <summary>
            Pause the thread for a specified time
            </summary>
      <param name="seconds">Length of time to pause</param>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.GetFPGATimestamp">
      <summary>
            Returns the system clock time in seconds.
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Internal.HardwareTimer.GetFPGATimestamp</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.GetMatchTime">
      <summary>
            Returns the Match Time in seconds
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.Internal.HardwareTimer.GetMatchTime</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.NewTimer">
      <summary>
            Creates a new Timer
            </summary>
      <returns>A new timer</returns>
    </member>
    <member name="T:WPILib.Internal.HardwareTimer.TimerImpl">
      <summary>
            A hardware timer implementation
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.#ctor">
      <summary>
            Create a new timer object
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Get">
      <summary>
            Get the current time from the timer
            </summary>
      <returns>Current time in seconds</returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.HasPeriodPassed(System.Double)">
      <summary>
            Check if the specified period has passed.
            If so, advance the start time by that period.
            </summary>
      <param name="period">The period to check for (seconds)</param>
      <returns>If the period has passed.</returns>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Reset">
      <summary>
            Reset the timer, and start the timer.
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Start">
      <summary>
            Start the timer running
            </summary>
    </member>
    <member name="M:WPILib.Internal.HardwareTimer.TimerImpl.Stop">
      <summary>
            Stop the timer
            </summary>
    </member>
    <member name="T:WPILib.LiveWindows.ILiveWindowSendable">
      <summary>
            Live Window Sendable is a special type of object sendable to the live window.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindows.ILiveWindowSendable.StartLiveWindowMode">
      <summary>
            Start having this sendable object automatically respond to
            value changes reflect the value on the table.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindows.ILiveWindowSendable.StopLiveWindowMode">
      <summary>
            Stop having this sendable object automatically respond to value changes.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindows.ILiveWindowSendable.UpdateTable">
      <summary>
            Update the table for this sendable object with the latest
            values.
            </summary>
    </member>
    <member name="T:WPILib.LiveWindows.LiveWindow">
      <summary>
            The LiveWindow class is the public interface for putting sensor and actuators on the LiveWindow.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.LiveWindows.LiveWindow</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.AddActuator(System.String,System.Int32,System.Int32,WPILib.LiveWindows.ILiveWindowSendable)">
      <summary>
            Add Actuator to LiveWindow. </summary>
      <param name="moduleType">A string that defines the module name in the label for the value</param>
      <param name="moduleNumber">The number of the particular module type</param>
      <param name="channel">The channel number the device is connected to (usually PWM)</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.AddActuator(System.String,System.Int32,WPILib.LiveWindows.ILiveWindowSendable)">
      <summary>
            Add Actuator to LiveWindow. </summary>
      <param name="moduleType">A string that defines the module name in the label for the value</param>
      <param name="channel">The channel number the device is connected to (usually PWM)</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.AddActuator(System.String,System.String,WPILib.LiveWindows.ILiveWindowSendable)">
      <summary>
            Add an Actuator associated with the subsystem and with call it by the given name.
            </summary>
      <param name="subsystem">The subsystem this component is part of.</param>
      <param name="name">The name of this component.</param>
      <param name="component">A LiveWindowSendable component that represents an actuator.</param>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.AddSensor(System.String,System.Int32,WPILib.LiveWindows.ILiveWindowSendable)">
      <summary>
            Add Sensor to LiveWindow. The components are shown with the type and
             channel like this: Gyro[1] for a gyro object connected to the first
             analog channel.
            </summary>
      <param name="moduleType">A string indicating the type if the module used in the naming (above)</param>
      <param name="channel">The channel number the device is connected to</param>
      <param name="component">A reference to the object being added</param>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.AddSensor(System.String,System.String,WPILib.LiveWindows.ILiveWindowSendable)">
      <summary>
            Add a Sensor associated with the subsystem and with call it by the given name.
            </summary>
      <param name="subsystem">The subsystem this component is part of.</param>
      <param name="name">The name of this component.</param>
      <param name="component">A LiveWindowSendable component that represents a sensor.</param>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.Run">
      <summary>
            The run method is called repeatedly to keep the values refreshed on the screen in test mode.
            </summary>
    </member>
    <member name="M:WPILib.LiveWindows.LiveWindow.SetEnabled(System.Boolean)">
      <summary>
            Set the enabled state of LiveWindow. </summary>
      <param name="enabled">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>enabled</parameter>
            <parameter>M:WPILib.LiveWindows.LiveWindow.SetEnabled(System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="T:WPILib.SmartDashboards.SendableChooser">
      <summary>
            The <see cref="T:WPILib.SmartDashboards.SendableChooser" /> class is a useful tool for presenting a 
            selection of options to the <see cref="T:WPILib.SmartDashboards.SmartDashboard" />.
            </summary>
    </member>
    <member name="M:WPILib.SmartDashboards.SendableChooser.#ctor">
      <summary>
            Instantiates a <see cref="T:WPILib.SmartDashboards.SendableChooser" /></summary>
    </member>
    <member name="M:WPILib.SmartDashboards.SendableChooser.AddDefault(System.String,System.Object)">
      <summary>
            Add the given object to the list of options and marks it as the default.
            Functionally, this is very close to
            <see cref="M:WPILib.SmartDashboards.SendableChooser.AddObject(System.String,System.Object)">AddObject(...)</see> except that it will
            use this as the default option if none other is explicitly selected.
            </summary>
      <param name="name">The name of the option</param>
      <param name="obj">The option</param>
    </member>
    <member name="M:WPILib.SmartDashboards.SendableChooser.AddObject(System.String,System.Object)">
      <summary>
            Adds the given object tot the list of options. On the 
            <see cref="T:WPILib.SmartDashboards.SmartDashboard" /> on the desktop, the object will appear as the given name.
            </summary>
      <param name="name">The name of the option</param>
      <param name="obj">The option</param>
    </member>
    <member name="M:WPILib.SmartDashboards.SendableChooser.GetSelected">
      <summary>
            Returns the selected option. If there is none selected, it will return
            the default. If there is none selected, then it will return null.
            </summary>
      <returns>The option selected</returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SendableChooser.InitTable(NetworkTables.Tables.ITable)">
      <summary>
            Initialize a table for this sendable object.
            </summary>
      <param name="subtable">The table to put the values in.</param>
    </member>
    <member name="P:WPILib.SmartDashboards.SendableChooser.SmartDashboardType">
      <summary>
            Returns the string representation of the named data type that will be used by the smart dashboard for this sendable
            </summary>
    </member>
    <member name="P:WPILib.SmartDashboards.SendableChooser.Table">
      <summary>
            Returns the table that is currently associated with the sendable
            </summary>
    </member>
    <member name="T:WPILib.SmartDashboards.SmartDashboard">
      <summary>
            The <see cref="T:WPILib.SmartDashboards.SmartDashboard" /> class is the bridge between robot programs and the SmartDashboard on the laptop.
            </summary>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>WPILib.SmartDashboards.SmartDashboard</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="defaultValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetData(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetData(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetData(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetData(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="defaultValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="defaultValue">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>defaultValue</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.GetString(System.String,System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.PutBoolean(System.String,System.Boolean)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutBoolean(System.String,System.Boolean)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.PutData(System.String,WPILib.Interfaces.ISendable)">
      <summary>
            Maps the specified key to the specified value in this table.
            </summary>
      <param name="key">The Key</param>
      <param name="data">The Value</param>
      <exception cref="T:System.ArgumentNullException">If key is null.</exception>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.PutData(WPILib.Interfaces.INamedSendable)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutData(WPILib.Interfaces.INamedSendable)</parameter>
          </include>
        </markup>
      </summary>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutData(WPILib.Interfaces.INamedSendable)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.PutNumber(System.String,System.Double)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutNumber(System.String,System.Double)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:WPILib.SmartDashboards.SmartDashboard.PutString(System.String,System.String)">
      <summary>
        <markup>
          <include item="SMCMissingTag">
            <parameter>summary</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutString(System.String,System.String)</parameter>
          </include>
        </markup>
      </summary>
      <param name="key">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>key</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
      <param name="value">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>value</parameter>
            <parameter>M:WPILib.SmartDashboards.SmartDashboard.PutString(System.String,System.String)</parameter>
          </include>
        </markup>
      </param>
    </member>
  </members>
</doc>